{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Chess/src/App.js\";\nimport React, { useState, useEffect } from \"react\"; // import logo from \"./logo.svg\";\n\nimport \"./App.css\";\nimport Square from \"./Square\"; // import styled from \"styled-components\";\n// fromSquare \"10\"\n// toSquare \"21\"\n// mapObj\n// 2. mapObj[toSquare] = mapObj[fromSquare] to the obj\n// 1. delete the property whose key is \"fromSquare\" from mapObj\n// const Div = styled.div({\n//   background: \"yellow\",\n//   opacity: \"1\",\n//   \":hover\": {\n//     background: \"red\",\n//   },\n// });\n\nconst mapObj = {\n  //database of the board\n  \"00\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"01\": {\n    type: \"knight\",\n    player: \"black\"\n  },\n  \"02\": {\n    type: \"bishop\",\n    player: \"black\"\n  },\n  \"03\": {\n    type: \"king\",\n    player: \"black\"\n  },\n  \"04\": {\n    type: \"queen\",\n    player: \"black\"\n  },\n  \"05\": {\n    type: \"bishop\",\n    player: \"black\"\n  },\n  \"06\": {\n    type: \"knight\",\n    player: \"black\"\n  },\n  \"07\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"10\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"11\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"12\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"13\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"14\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"15\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"16\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"17\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"60\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"61\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"62\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"63\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"64\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"65\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"66\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"67\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"70\": {\n    type: \"rook\",\n    player: \"white\"\n  },\n  \"71\": {\n    type: \"knight\",\n    player: \"white\"\n  },\n  \"72\": {\n    type: \"bishop\",\n    player: \"white\"\n  },\n  \"73\": {\n    type: \"king\",\n    player: \"white\"\n  },\n  \"74\": {\n    type: \"queen\",\n    player: \"white\"\n  },\n  \"75\": {\n    type: \"bishop\",\n    player: \"white\"\n  },\n  \"76\": {\n    type: \"knight\",\n    player: \"white\"\n  },\n  \"77\": {\n    type: \"rook\",\n    player: \"white\"\n  }\n};\n\nconst Board = () => {\n  const [count, setCount] = useState(0);\n  const [fromSquare, setFromSquare] = useState();\n  const [player, setPlayer] = useState(true);\n  const [check, setCheck] = useState(false); // const [toSquare, setToSquare] = useState();\n  // useEffect(() => {\n  //   if (check === true) {\n  //     console.log(\"check is true\");\n  //     setCount(0);\n  //   }\n  // }, 1);\n\n  let printCheckOutside;\n  let printPlayerOutside;\n\n  const printCheck = check => {\n    check === false ? printCheckOutside = \"no check at this point\" : printCheckOutside = \"check, please protect your King\";\n  };\n\n  const printPlayer = player => {\n    player === true ? printPlayerOutside = \"white player's turn\" : printPlayerOutside = \"blue player's turn\";\n  };\n\n  printCheck(check);\n  printPlayer(player);\n\n  const moveInvoke = (moveFrom, moveTo) => {\n    // the actual movePiece\n    movePiece(moveFrom, moveTo);\n  };\n\n  const splitAndParseToNumber = square => {\n    const [row, col] = square.split(\"\"); // console.log(\"splitted\");\n\n    return [parseInt(row), parseInt(col)];\n  };\n\n  check === false ? console.log(\"check false\") : console.log(\"check truth\"); // checking if theres a check in play\n\n  const findKing = startingSquare => {\n    // here we find the king's key (location)\n    const entries = Object.entries(mapObj); // console.log(entries);\n\n    for (let i = 0; i <= entries.length - 1; i++) {\n      let kingIndex;\n\n      if (entries[i][1].type === \"king\") {\n        if (entries[i][1].player !== mapObj[startingSquare].player) {\n          kingIndex = entries[i][0];\n          console.log(\"insideFindKing:\", kingIndex);\n          return kingIndex;\n        }\n      }\n    }\n  }; // const getTheFigurePath = (moveFrom, moveTo) => {\n  //   const path = [];\n  //   let passingSquare;\n  //   const [moveFromRow, moveFromCol] = splitAndParseToNumber(moveFrom);\n  //   const [moveToRow, moveToCol] = splitAndParseToNumber(moveTo);\n  //   let j = moveFromCol;\n  //   //fill the path with the squares we past\n  //   //check witch is bigger , the rows move from or rows move to . if moveTo rows? then we going down, else going up\n  //   //check the going up movements:TODO - SET IN A OTHER FUNCTION ?\n  //   if (moveFromRow > moveToRow) {\n  //     //going only up the board\n  //     if (moveFromCol === moveToCol) {\n  //       for (let i = moveFromRow; i >= moveToRow; i--) {\n  //         passingSquare = i.toString() + moveFromCol.toString();\n  //         path.push(passingSquare);\n  //       }\n  //     }\n  //     //going up and move left\n  //     else if (moveFromCol > moveToCol) {\n  //       for (let i = moveFromRow; i > moveToRow; i--) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j >= moveToCol) j--;\n  //       }\n  //       path.push(moveTo);\n  //     }\n  //     //move up and turn right\n  //     else if (moveFromCol < moveToCol) {\n  //       for (let i = moveFromRow; i >= moveToRow; i--) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j <= moveToCol) j++;\n  //       }\n  //       path.push(moveTo);\n  //     }\n  //   }\n  //   // Check for the going down movements:\n  //   else {\n  //     //only goes down:\n  //     if (moveFromCol === moveToCol) {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + moveToCol.toString();\n  //         path.push(passingSquare);\n  //       }\n  //       //goes down and right\n  //     } else if (moveFromCol < moveToCol) {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j <= moveToCol) j++;\n  //       }\n  //       //goes down and left\n  //     } else {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + j.toString();\n  //         if (j >= moveToCol) j--;\n  //       }\n  //     }\n  //   }\n  //   return path;\n  // };\n\n\n  const movePawn = (fromMove, toMove) => {\n    // console.log(mapObj[fromSquare].player);\n    if (mapObj[fromSquare].player === \"black\") {\n      // if the pawn is black or white he can go to certain direction and eat a certain way\n      //only the pawns first step may be two steps\n      if (fromMove[0] - toMove[0] === -2) {\n        //only if its the pawn first move it can go two steps\n        if (fromMove[0] === \"1\") {\n          return moveInvoke(fromSquare, toMove);\n        }\n      }\n\n      if (fromMove[0] - toMove[0] === -1) {\n        //normally a pawn can only go straight\n        if (fromMove[1] - toMove[1] === 0) {\n          if (!mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        } else if (fromMove[1] - toMove[1] === 1 || fromMove[1] - toMove[1] === -1) {\n          // in case of eating\n          if (!mapObj[toMove]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        }\n      }\n    }\n\n    if (mapObj[fromSquare].player === \"white\") {\n      if (fromMove[0] - toMove[0] === 2) {\n        //only if its the pawn first move it can go two steps\n        if (fromMove[0] === \"6\") {\n          return moveInvoke(fromSquare, toMove);\n        }\n      } //case of white pawn go straight\n\n\n      if (fromMove[0] - toMove[0] === 1) {\n        if (fromMove[1] - toMove[1] === 0) {\n          if (!mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        } else if (fromMove[1] - toMove[1] === 1 || fromMove[1] - toMove[1] === -1) {\n          //in case of eating\n          if (!mapObj[toMove]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        }\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const moveRook = (fromMove, con) => {\n    // rook can only move straight up\\down or straight left\\right\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex <= 7 || fromToZeroIndex >= -7) {\n      if (fromToOneIndex === 0) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOneIndex <= 7 || fromToOneIndex >= -7) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n  };\n\n  const moveKnight = (fromMove, con) => {\n    // knight logic. if it moves 1 further, it means 2 to the side, if 2 further, 1 to the side.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex === 1 || fromToZeroIndex === -1) {\n      if (fromToOneIndex === -2 || fromToOneIndex === 2) {\n        return moveInvoke(fromMove, con);\n      }\n    } else if (fromToZeroIndex === 2 || fromToZeroIndex === -2) {\n      if (fromToOneIndex === 1 || fromToOneIndex === -1) {\n        return moveInvoke(fromMove, con);\n      }\n    }\n  };\n\n  const moveKnightPath = (fromMove, con) => {\n    // knight logic. if it moves 1 further, it means 2 to the side, if 2 further, 1 to the side.\n    // let pathCheck = [];\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex === 1 || fromToZeroIndex === -1) {\n      if (fromToOneIndex === -2 || fromToOneIndex === 2) {\n        return console.log(\"yes puta!!!!!!\");\n      }\n    } else if (fromToZeroIndex === 2 || fromToZeroIndex === -2) {\n      if (fromToOneIndex === 1 || fromToOneIndex === -1) {\n        return console.log(\"yes puta!!!!!!\");\n      }\n    }\n  }; // const moveKnightPath = (fromMove) => {\n  //   const zeroPlusTwo = parseInt(fromMove[0]) + 2;\n  //   const zeroPlusOne = parseInt(fromMove[1]) + 1;\n  //   const zeroPminusOne = parseInt(fromMove[1]) - 1;\n  //   let potentialIndex;\n  //   let pathCheck = [];\n  //   console.log(zeroPlusTwo, zeroPlusOne, zeroPminusOne);\n  // };\n  // moveKnightPath(\"66\");\n\n\n  const moveBishop = (fromMove, con) => {\n    // bishop can only move at an angle on its same color.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    let i = fromToZeroIndex;\n\n    if (fromToZeroIndex === i || fromToZeroIndex === -i) {\n      if (fromToOneIndex === i || fromToOneIndex === -i) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n  };\n\n  const moveQueen = (fromMove, con) => {\n    // can behave as any other piece apart from knight.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    let i = fromToZeroIndex;\n\n    if (fromToZeroIndex === i || fromToZeroIndex === -i || fromToZeroIndex === 0) {\n      if (fromToOneIndex === i || fromToOneIndex === -i || fromToOneIndex === 0) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOneIndex <= 7 || fromToOneIndex >= -7) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const moveKing = (fromMove, con) => {\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex === 1 || fromToZeroIndex === 0 || fromToZeroIndex === -1) {\n      if (fromToOneIndex === 1 || fromToOneIndex === 0 || fromToOneIndex === -1) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const checkPath = path => {\n    //get an path array\n    for (let i = 1; i <= path.length; i++) {\n      let figure = path[i];\n\n      if (mapObj[figure]) {\n        // console.log(\"figured\");\n        // console.log(mapObj[path[0]].type);\n        if (mapObj[path[0]].type == \"knight\") {\n          return true;\n        }\n      }\n\n      if (mapObj[figure]) return false;\n\n      if (i === path.length - 1) {\n        if (mapObj[figure]) {\n          if (mapObj[figure].player !== mapObj[figure].player) {\n            return false;\n          }\n        }\n      } //if last cell is empty ?\n      // if the last cell is the same color as the current player\n      //if the last cell is the other color\n      //last cell.\n\n    }\n\n    return true; // return printCheckOutsidelean\n  };\n\n  const movePiece = (fromSquare, toSquare) => {\n    const movingContent = () => {\n      // here we will move the actual piece from one sqaure to another.\n      console.log(\"inside move\", fromSquare, toSquare); // 1. mapObj[toSquare] = mapObj[fromSquare] to the obj\n      // 2. delete the property whose key is \"fromSquare\" from mapObj\n      // const path = getTheFigurePath(fromSquare, toSquare);\n\n      if (mapObj[fromSquare]) {\n        // to make sure fromSquare cant be empty\n        console.log(\"so far\");\n\n        if (mapObj[toSquare] === findKing(fromSquare)) {\n          console.log(\"this far\");\n\n          if (mapObj[fromSquare].type === \"knight\") {\n            // moveKnightPath(fromSquare, );\n            console.log(\"ok puta!\");\n          }\n        }\n      }\n\n      if (check === true) {\n        return;\n      } // if (!checkPath(path)) return;\n\n\n      mapObj[toSquare] = mapObj[fromSquare];\n      delete mapObj[fromSquare];\n      setPlayer(!player);\n      console.log(\"player is: \", player);\n      const path = findPath(fromSquare, toSquare);\n      console.log(\"path is\", path);\n    };\n\n    if (player === true) {\n      if (mapObj[fromSquare].player === \"white\") {\n        movingContent();\n      }\n    } else if (player === false) {\n      if (mapObj[fromSquare].player === \"black\") {\n        movingContent();\n      }\n    } // const isCheck = (fromSquare, toSquare) => {\n    //   if (mapObj[toSquare].type === \"knight\") {\n    //     if (path[path].length - 1 === findKing(fromSquare)) {\n    //       console.log(\"we fucking did it\");\n    //     }\n    //   }\n    // };\n    // isCheck(toSquare);\n\n  }; // useEffect(() => {\n  //   console.log(\"inEffect\", fromSquare, toSquare);\n  //   if (fromSquare && toSquare) {\n  //     movePiece(fromSquare, toSquare);\n  //     // setToSquare();\n  //   }\n  // }, [fromSquare, toSquare]);\n  // console.log(\"fromSquare:\", fromSquare);\n  // console.log(\"ToSquare:\", toSquare);\n  // const borderHover = \"black solid 1px\";\n  // console.log(borderHover);\n  // let isHovered = false;\n  // const handleMouseOver = (colorPic, borderHover) => {\n  //   if (count === 0) {\n  //     // borderHover = \"red solid 1px\";\n  //     // console.log(borderHover);\n  //     // console.log(\"color:\", colorPic);\n  //     isHovered = true;\n  //     // colorPic = \"black\";\n  //     // console.log(\"color2:\", colorPic);P\n  //     console.log(isHovered);\n  //   }\n  // };\n\n\n  const findPath = (fromSquare, toSquare) => {\n    const fromSquareZeroIndex = fromSquare[0] - toSquare[0];\n    const fromSquareOneIndex = fromSquare[1] - toSquare[1];\n    let pathIndex;\n    const path = []; //   // if ((mapObj[fromSquare].type = \"pawn\")) {\n    //   //   if ((mapObj[fromSquare].player = \"white\")) {\n    //   //     if (fromSquareZeroIndex === 1) {\n    //   //       if (fromSquareOneIndex === 0) {\n    //   //         path.push(toSquare);\n    //   //       } else if (fromSquareOneIndex === 1 || fromSquareOneIndex === -1) {\n    //   //         if (mapObj[toSquare]) {\n    //   //           if (mapObj[fromSquare].player !== mapObj[toSquare].player) {\n    //   //             path.push(toSquare);\n    //   //           }\n    //   //         }\n    //   //       }\n    //   //     } else if (fromSquareZeroIndex === 2) {\n    //   //       if (fromSquare[0] === \"6\") {\n    //   //         path.push(toSquare);\n    //   //       }\n    //   //     }\n    //   //   }\n    //   //   if ((mapObj[fromSquare].player = \"black\")) {\n    //   //     if (fromSquareZeroIndex === -1) {\n    //   //       if (fromSquareOneIndex === 0) {\n    //   //         path.push(toSquare);\n    //   //       } else if (fromSquareOneIndex === 1 || fromSquareOneIndex === -1) {\n    //   //         if (mapObj[toSquare]) {\n    //   //           if (mapObj[fromSquare].player !== mapObj[toSquare].player) {\n    //   //             path.push(toSquare);\n    //   //           }\n    //   //         }\n    //   //       }\n    //   //     } else if (fromSquareZeroIndex === -2) {\n    //   //       if (fromSquare[0] === \"1\") {\n    //   //         path.push(toSquare);\n    //   //       }\n    //   //     }\n    //   //   }\n    //   //   return path;\n    //   // }\n\n    if (mapObj[fromSquare].type = \"rook\") {\n      console.log(\"im rook!!!!\"); // if (fromSquareZeroIndex <= 7 || fromSquareZeroIndex >= -7) {\n      //   if (fromSquareOneIndex === 0) {\n      //     path.push(pathIndex);\n      //   }\n      // } else if (fromSquareZeroIndex === 0) {\n      //   if (fromSquareOneIndex <= 7 || fromSquareOneIndex >= -7) {\n      //     path.push(pathIndex);\n      //   }\n      // }\n      // return path;\n    } //   if ((mapObj[fromSquare].type = \"bishop\")) {\n    //   }\n    //   if ((mapObj[fromSquare].type = \"knight\")) {\n    //   }\n    //   if ((mapObj[fromSquare].type = \"king\")) {\n    //   }\n    //   if ((mapObj[fromSquare].type = \"queen\")) {\n    //   }\n\n  };\n\n  const handleClick = con => {\n    console.log(player);\n\n    if (count === 0) {\n      if (!mapObj[con]) {\n        //first spuare to click cant be empty\n        return;\n      }\n    }\n\n    if (count === 0) {\n      setFromSquare(con);\n      setCount(count + 1);\n      return;\n    } //second click\n    // fromSquare -> toSqaure\n\n\n    if (!mapObj[con] || mapObj[fromSquare].player !== mapObj[con].player) {\n      // const path = getTheFigurePath(fromSquare, con);\n      if (mapObj[fromSquare].type === \"pawn\") {\n        movePawn(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"rook\") {\n        moveRook(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"knight\") {\n        moveKnight(fromSquare, con);\n        console.log(\"now im this con:\", con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"bishop\") {\n        moveBishop(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"king\") {\n        moveKing(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"queen\") {\n        moveQueen(fromSquare, con);\n        setCount(0);\n        return;\n      }\n    }\n\n    setCount(0);\n  };\n\n  return (\n    /*#__PURE__*/\n    // we will map 8 * 8 of arrays to build our board.\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 5\n      }\n    }, Array(8).fill(0).map((e, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 13\n        }\n      }, Array(8).fill(0).map((e, squareIndex) => {\n        const colorPic = (squareIndex + rowIndex) % 2 === 0 ? \"white\" : \"black\"; // we will caculate the spread of black & white color on the board and identify each square\n\n        const numRow = rowIndex.toString();\n        const numSquare = squareIndex.toString();\n        const con = numRow.concat(numSquare);\n        const piece = mapObj[con];\n        return (\n          /*#__PURE__*/\n          //props\n          React.createElement(Square, {\n            color: colorPic,\n            piece: piece,\n            onClick: () => handleClick(con) // onMouseOver={() => handleMouseOver(colorPic)}\n            ,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 21\n            }\n          })\n        );\n      }));\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 7\n      }\n    }, printCheckOutside), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 7\n      }\n    }, printPlayerOutside))\n  );\n  /* return (\n    <div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n      </div>\n       <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"black\" }} />\n      </div>\n    </div>\n   );*/\n};\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/Chess/src/App.js"],"names":["React","useState","useEffect","Square","mapObj","type","player","Board","count","setCount","fromSquare","setFromSquare","setPlayer","check","setCheck","printCheckOutside","printPlayerOutside","printCheck","printPlayer","moveInvoke","moveFrom","moveTo","movePiece","splitAndParseToNumber","square","row","col","split","parseInt","console","log","findKing","startingSquare","entries","Object","i","length","kingIndex","movePawn","fromMove","toMove","moveRook","con","fromToZeroIndex","fromToOneIndex","moveKnight","moveKnightPath","moveBishop","moveQueen","moveKing","checkPath","path","figure","toSquare","movingContent","findPath","fromSquareZeroIndex","fromSquareOneIndex","pathIndex","handleClick","Array","fill","map","e","rowIndex","display","flexDirection","squareIndex","colorPic","numRow","toString","numSquare","concat","piece","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Square from \"./Square\";\n// import styled from \"styled-components\";\n\n// fromSquare \"10\"\n// toSquare \"21\"\n// mapObj\n// 2. mapObj[toSquare] = mapObj[fromSquare] to the obj\n// 1. delete the property whose key is \"fromSquare\" from mapObj\n\n// const Div = styled.div({\n//   background: \"yellow\",\n//   opacity: \"1\",\n//   \":hover\": {\n//     background: \"red\",\n\n//   },\n// });\nconst mapObj = {\n  //database of the board\n  \"00\": { type: \"rook\", player: \"black\" },\n  \"01\": { type: \"knight\", player: \"black\" },\n  \"02\": { type: \"bishop\", player: \"black\" },\n  \"03\": { type: \"king\", player: \"black\" },\n  \"04\": { type: \"queen\", player: \"black\" },\n  \"05\": { type: \"bishop\", player: \"black\" },\n  \"06\": { type: \"knight\", player: \"black\" },\n  \"07\": { type: \"rook\", player: \"black\" },\n  \"10\": { type: \"pawn\", player: \"black\" },\n  \"11\": { type: \"pawn\", player: \"black\" },\n  \"12\": { type: \"pawn\", player: \"black\" },\n  \"13\": { type: \"pawn\", player: \"black\" },\n  \"14\": { type: \"pawn\", player: \"black\" },\n  \"15\": { type: \"pawn\", player: \"black\" },\n  \"16\": { type: \"pawn\", player: \"black\" },\n  \"17\": { type: \"pawn\", player: \"black\" },\n  \"60\": { type: \"pawn\", player: \"white\" },\n  \"61\": { type: \"pawn\", player: \"white\" },\n  \"62\": { type: \"pawn\", player: \"white\" },\n  \"63\": { type: \"pawn\", player: \"white\" },\n  \"64\": { type: \"pawn\", player: \"white\" },\n  \"65\": { type: \"pawn\", player: \"white\" },\n  \"66\": { type: \"pawn\", player: \"white\" },\n  \"67\": { type: \"pawn\", player: \"white\" },\n  \"70\": { type: \"rook\", player: \"white\" },\n  \"71\": { type: \"knight\", player: \"white\" },\n  \"72\": { type: \"bishop\", player: \"white\" },\n  \"73\": { type: \"king\", player: \"white\" },\n  \"74\": { type: \"queen\", player: \"white\" },\n  \"75\": { type: \"bishop\", player: \"white\" },\n  \"76\": { type: \"knight\", player: \"white\" },\n  \"77\": { type: \"rook\", player: \"white\" },\n};\n\nconst Board = () => {\n  const [count, setCount] = useState(0);\n  const [fromSquare, setFromSquare] = useState();\n  const [player, setPlayer] = useState(true);\n  const [check, setCheck] = useState(false);\n  // const [toSquare, setToSquare] = useState();\n  // useEffect(() => {\n  //   if (check === true) {\n  //     console.log(\"check is true\");\n  //     setCount(0);\n  //   }\n  // }, 1);\n\n  let printCheckOutside;\n  let printPlayerOutside;\n  const printCheck = (check) => {\n    check === false\n      ? (printCheckOutside = \"no check at this point\")\n      : (printCheckOutside = \"check, please protect your King\");\n  };\n  const printPlayer = (player) => {\n    player === true\n      ? (printPlayerOutside = \"white player's turn\")\n      : (printPlayerOutside = \"blue player's turn\");\n  };\n  printCheck(check);\n  printPlayer(player);\n  const moveInvoke = (moveFrom, moveTo) => {\n    // the actual movePiece\n    movePiece(moveFrom, moveTo);\n  };\n  const splitAndParseToNumber = (square) => {\n    const [row, col] = square.split(\"\");\n    // console.log(\"splitted\");\n    return [parseInt(row), parseInt(col)];\n  };\n  check === false ? console.log(\"check false\") : console.log(\"check truth\");\n  // checking if theres a check in play\n  const findKing = (startingSquare) => {\n    // here we find the king's key (location)\n    const entries = Object.entries(mapObj);\n    // console.log(entries);\n    for (let i = 0; i <= entries.length - 1; i++) {\n      let kingIndex;\n      if (entries[i][1].type === \"king\") {\n        if (entries[i][1].player !== mapObj[startingSquare].player) {\n          kingIndex = entries[i][0];\n          console.log(\"insideFindKing:\", kingIndex);\n          return kingIndex;\n        }\n      }\n    }\n  };\n\n  // const getTheFigurePath = (moveFrom, moveTo) => {\n  //   const path = [];\n  //   let passingSquare;\n  //   const [moveFromRow, moveFromCol] = splitAndParseToNumber(moveFrom);\n  //   const [moveToRow, moveToCol] = splitAndParseToNumber(moveTo);\n  //   let j = moveFromCol;\n  //   //fill the path with the squares we past\n  //   //check witch is bigger , the rows move from or rows move to . if moveTo rows? then we going down, else going up\n  //   //check the going up movements:TODO - SET IN A OTHER FUNCTION ?\n  //   if (moveFromRow > moveToRow) {\n  //     //going only up the board\n  //     if (moveFromCol === moveToCol) {\n  //       for (let i = moveFromRow; i >= moveToRow; i--) {\n  //         passingSquare = i.toString() + moveFromCol.toString();\n  //         path.push(passingSquare);\n  //       }\n  //     }\n  //     //going up and move left\n  //     else if (moveFromCol > moveToCol) {\n  //       for (let i = moveFromRow; i > moveToRow; i--) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j >= moveToCol) j--;\n  //       }\n  //       path.push(moveTo);\n  //     }\n  //     //move up and turn right\n  //     else if (moveFromCol < moveToCol) {\n  //       for (let i = moveFromRow; i >= moveToRow; i--) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j <= moveToCol) j++;\n  //       }\n  //       path.push(moveTo);\n  //     }\n  //   }\n  //   // Check for the going down movements:\n  //   else {\n  //     //only goes down:\n  //     if (moveFromCol === moveToCol) {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + moveToCol.toString();\n  //         path.push(passingSquare);\n  //       }\n  //       //goes down and right\n  //     } else if (moveFromCol < moveToCol) {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j <= moveToCol) j++;\n  //       }\n  //       //goes down and left\n  //     } else {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + j.toString();\n  //         if (j >= moveToCol) j--;\n  //       }\n  //     }\n  //   }\n  //   return path;\n  // };\n\n  const movePawn = (fromMove, toMove) => {\n    // console.log(mapObj[fromSquare].player);\n    if (mapObj[fromSquare].player === \"black\") {\n      // if the pawn is black or white he can go to certain direction and eat a certain way\n      //only the pawns first step may be two steps\n      if (fromMove[0] - toMove[0] === -2) {\n        //only if its the pawn first move it can go two steps\n        if (fromMove[0] === \"1\") {\n          return moveInvoke(fromSquare, toMove);\n        }\n      }\n      if (fromMove[0] - toMove[0] === -1) {\n        //normally a pawn can only go straight\n        if (fromMove[1] - toMove[1] === 0) {\n          if (!mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        } else if (\n          fromMove[1] - toMove[1] === 1 ||\n          fromMove[1] - toMove[1] === -1\n        ) {\n          // in case of eating\n          if (!mapObj[toMove]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        }\n      }\n    }\n    if (mapObj[fromSquare].player === \"white\") {\n      if (fromMove[0] - toMove[0] === 2) {\n        //only if its the pawn first move it can go two steps\n        if (fromMove[0] === \"6\") {\n          return moveInvoke(fromSquare, toMove);\n        }\n      }\n      //case of white pawn go straight\n      if (fromMove[0] - toMove[0] === 1) {\n        if (fromMove[1] - toMove[1] === 0) {\n          if (!mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        } else if (\n          fromMove[1] - toMove[1] === 1 ||\n          fromMove[1] - toMove[1] === -1\n        ) {\n          //in case of eating\n          if (!mapObj[toMove]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        }\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const moveRook = (fromMove, con) => {\n    // rook can only move straight up\\down or straight left\\right\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex <= 7 || fromToZeroIndex >= -7) {\n      if (fromToOneIndex === 0) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOneIndex <= 7 || fromToOneIndex >= -7) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n  };\n  const moveKnight = (fromMove, con) => {\n    // knight logic. if it moves 1 further, it means 2 to the side, if 2 further, 1 to the side.\n\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    if (fromToZeroIndex === 1 || fromToZeroIndex === -1) {\n      if (fromToOneIndex === -2 || fromToOneIndex === 2) {\n        return moveInvoke(fromMove, con);\n      }\n    } else if (fromToZeroIndex === 2 || fromToZeroIndex === -2) {\n      if (fromToOneIndex === 1 || fromToOneIndex === -1) {\n        return moveInvoke(fromMove, con);\n      }\n    }\n  };\n  const moveKnightPath = (fromMove, con) => {\n    // knight logic. if it moves 1 further, it means 2 to the side, if 2 further, 1 to the side.\n    // let pathCheck = [];\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    if (fromToZeroIndex === 1 || fromToZeroIndex === -1) {\n      if (fromToOneIndex === -2 || fromToOneIndex === 2) {\n        return console.log(\"yes puta!!!!!!\");\n      }\n    } else if (fromToZeroIndex === 2 || fromToZeroIndex === -2) {\n      if (fromToOneIndex === 1 || fromToOneIndex === -1) {\n        return console.log(\"yes puta!!!!!!\");\n      }\n    }\n  };\n  // const moveKnightPath = (fromMove) => {\n  //   const zeroPlusTwo = parseInt(fromMove[0]) + 2;\n  //   const zeroPlusOne = parseInt(fromMove[1]) + 1;\n  //   const zeroPminusOne = parseInt(fromMove[1]) - 1;\n  //   let potentialIndex;\n  //   let pathCheck = [];\n  //   console.log(zeroPlusTwo, zeroPlusOne, zeroPminusOne);\n  // };\n  // moveKnightPath(\"66\");\n  const moveBishop = (fromMove, con) => {\n    // bishop can only move at an angle on its same color.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    let i = fromToZeroIndex;\n    if (fromToZeroIndex === i || fromToZeroIndex === -i) {\n      if (fromToOneIndex === i || fromToOneIndex === -i) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n  };\n  const moveQueen = (fromMove, con) => {\n    // can behave as any other piece apart from knight.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    let i = fromToZeroIndex;\n    if (\n      fromToZeroIndex === i ||\n      fromToZeroIndex === -i ||\n      fromToZeroIndex === 0\n    ) {\n      if (\n        fromToOneIndex === i ||\n        fromToOneIndex === -i ||\n        fromToOneIndex === 0\n      ) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOneIndex <= 7 || fromToOneIndex >= -7) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const moveKing = (fromMove, con) => {\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (\n      fromToZeroIndex === 1 ||\n      fromToZeroIndex === 0 ||\n      fromToZeroIndex === -1\n    ) {\n      if (\n        fromToOneIndex === 1 ||\n        fromToOneIndex === 0 ||\n        fromToOneIndex === -1\n      ) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n    return console.log(\"nah\");\n  };\n\n  const checkPath = (path) => {\n    //get an path array\n    for (let i = 1; i <= path.length; i++) {\n      let figure = path[i];\n      if (mapObj[figure]) {\n        // console.log(\"figured\");\n        // console.log(mapObj[path[0]].type);\n        if (mapObj[path[0]].type == \"knight\") {\n          return true;\n        }\n      }\n      if (mapObj[figure]) return false;\n      if (i === path.length - 1) {\n        if (mapObj[figure]) {\n          if (mapObj[figure].player !== mapObj[figure].player) {\n            return false;\n          }\n        }\n      }\n      //if last cell is empty ?\n      // if the last cell is the same color as the current player\n      //if the last cell is the other color\n\n      //last cell.\n    }\n    return true;\n    // return printCheckOutsidelean\n  };\n\n  const movePiece = (fromSquare, toSquare) => {\n    const movingContent = () => {\n      // here we will move the actual piece from one sqaure to another.\n      console.log(\"inside move\", fromSquare, toSquare);\n      // 1. mapObj[toSquare] = mapObj[fromSquare] to the obj\n      // 2. delete the property whose key is \"fromSquare\" from mapObj\n      // const path = getTheFigurePath(fromSquare, toSquare);\n      if (mapObj[fromSquare]) {\n        // to make sure fromSquare cant be empty\n        console.log(\"so far\");\n        if (mapObj[toSquare] === findKing(fromSquare)) {\n          console.log(\"this far\");\n          if (mapObj[fromSquare].type === \"knight\") {\n            // moveKnightPath(fromSquare, );\n            console.log(\"ok puta!\");\n          }\n        }\n      }\n      if (check === true) {\n        return;\n      }\n      // if (!checkPath(path)) return;\n      mapObj[toSquare] = mapObj[fromSquare];\n      delete mapObj[fromSquare];\n      setPlayer(!player);\n      console.log(\"player is: \", player);\n      const path = findPath(fromSquare, toSquare);\n      console.log(\"path is\", path);\n    };\n    if (player === true) {\n      if (mapObj[fromSquare].player === \"white\") {\n        movingContent();\n      }\n    } else if (player === false) {\n      if (mapObj[fromSquare].player === \"black\") {\n        movingContent();\n      }\n    }\n    // const isCheck = (fromSquare, toSquare) => {\n    //   if (mapObj[toSquare].type === \"knight\") {\n    //     if (path[path].length - 1 === findKing(fromSquare)) {\n    //       console.log(\"we fucking did it\");\n    //     }\n    //   }\n    // };\n    // isCheck(toSquare);\n  };\n  // useEffect(() => {\n  //   console.log(\"inEffect\", fromSquare, toSquare);\n  //   if (fromSquare && toSquare) {\n  //     movePiece(fromSquare, toSquare);\n  //     // setToSquare();\n  //   }\n  // }, [fromSquare, toSquare]);\n\n  // console.log(\"fromSquare:\", fromSquare);\n  // console.log(\"ToSquare:\", toSquare);\n  // const borderHover = \"black solid 1px\";\n  // console.log(borderHover);\n  // let isHovered = false;\n\n  // const handleMouseOver = (colorPic, borderHover) => {\n  //   if (count === 0) {\n  //     // borderHover = \"red solid 1px\";\n  //     // console.log(borderHover);\n  //     // console.log(\"color:\", colorPic);\n  //     isHovered = true;\n  //     // colorPic = \"black\";\n  //     // console.log(\"color2:\", colorPic);P\n\n  //     console.log(isHovered);\n  //   }\n  // };\n\n  const findPath = (fromSquare, toSquare) => {\n    const fromSquareZeroIndex = fromSquare[0] - toSquare[0];\n    const fromSquareOneIndex = fromSquare[1] - toSquare[1];\n    let pathIndex;\n    const path = [];\n    //   // if ((mapObj[fromSquare].type = \"pawn\")) {\n    //   //   if ((mapObj[fromSquare].player = \"white\")) {\n    //   //     if (fromSquareZeroIndex === 1) {\n    //   //       if (fromSquareOneIndex === 0) {\n    //   //         path.push(toSquare);\n    //   //       } else if (fromSquareOneIndex === 1 || fromSquareOneIndex === -1) {\n    //   //         if (mapObj[toSquare]) {\n    //   //           if (mapObj[fromSquare].player !== mapObj[toSquare].player) {\n    //   //             path.push(toSquare);\n    //   //           }\n    //   //         }\n    //   //       }\n    //   //     } else if (fromSquareZeroIndex === 2) {\n    //   //       if (fromSquare[0] === \"6\") {\n    //   //         path.push(toSquare);\n    //   //       }\n    //   //     }\n    //   //   }\n    //   //   if ((mapObj[fromSquare].player = \"black\")) {\n    //   //     if (fromSquareZeroIndex === -1) {\n    //   //       if (fromSquareOneIndex === 0) {\n    //   //         path.push(toSquare);\n    //   //       } else if (fromSquareOneIndex === 1 || fromSquareOneIndex === -1) {\n    //   //         if (mapObj[toSquare]) {\n    //   //           if (mapObj[fromSquare].player !== mapObj[toSquare].player) {\n    //   //             path.push(toSquare);\n    //   //           }\n    //   //         }\n    //   //       }\n    //   //     } else if (fromSquareZeroIndex === -2) {\n    //   //       if (fromSquare[0] === \"1\") {\n    //   //         path.push(toSquare);\n    //   //       }\n    //   //     }\n    //   //   }\n    //   //   return path;\n    //   // }\n    if ((mapObj[fromSquare].type = \"rook\")) {\n      console.log(\"im rook!!!!\");\n      // if (fromSquareZeroIndex <= 7 || fromSquareZeroIndex >= -7) {\n      //   if (fromSquareOneIndex === 0) {\n      //     path.push(pathIndex);\n      //   }\n      // } else if (fromSquareZeroIndex === 0) {\n      //   if (fromSquareOneIndex <= 7 || fromSquareOneIndex >= -7) {\n      //     path.push(pathIndex);\n      //   }\n      // }\n      // return path;\n    }\n    //   if ((mapObj[fromSquare].type = \"bishop\")) {\n    //   }\n    //   if ((mapObj[fromSquare].type = \"knight\")) {\n    //   }\n    //   if ((mapObj[fromSquare].type = \"king\")) {\n    //   }\n    //   if ((mapObj[fromSquare].type = \"queen\")) {\n    //   }\n  };\n\n  const handleClick = (con) => {\n    console.log(player);\n    if (count === 0) {\n      if (!mapObj[con]) {\n        //first spuare to click cant be empty\n        return;\n      }\n    }\n    if (count === 0) {\n      setFromSquare(con);\n      setCount(count + 1);\n      return;\n    }\n    //second click\n    // fromSquare -> toSqaure\n    if (!mapObj[con] || mapObj[fromSquare].player !== mapObj[con].player) {\n      // const path = getTheFigurePath(fromSquare, con);\n\n      if (mapObj[fromSquare].type === \"pawn\") {\n        movePawn(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"rook\") {\n        moveRook(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"knight\") {\n        moveKnight(fromSquare, con);\n        console.log(\"now im this con:\", con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"bishop\") {\n        moveBishop(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"king\") {\n        moveKing(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"queen\") {\n        moveQueen(fromSquare, con);\n        setCount(0);\n        return;\n      }\n    }\n    setCount(0);\n  };\n\n  return (\n    // we will map 8 * 8 of arrays to build our board.\n    <div>\n      {Array(8)\n        .fill(0)\n        .map((e, rowIndex) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n              }}\n            >\n              {Array(8)\n                .fill(0)\n                .map((e, squareIndex) => {\n                  const colorPic =\n                    (squareIndex + rowIndex) % 2 === 0 ? \"white\" : \"black\";\n                  // we will caculate the spread of black & white color on the board and identify each square\n                  const numRow = rowIndex.toString();\n                  const numSquare = squareIndex.toString();\n                  const con = numRow.concat(numSquare);\n                  const piece = mapObj[con];\n\n                  return (\n                    //props\n                    <Square\n                      color={colorPic}\n                      piece={piece}\n                      onClick={() => handleClick(con)}\n\n                      // onMouseOver={() => handleMouseOver(colorPic)}\n                    />\n                  );\n                })}\n            </div>\n          );\n        })}\n      <h1>{printCheckOutside}</h1>\n      <h1>{printPlayerOutside}</h1>\n    </div>\n  );\n\n  /* return (\n    <div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n      </div>\n\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"black\" }} />\n      </div>\n    </div>\n   );*/\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}