{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Chess/src/App.js\";\nimport React, { useState, useEffect } from \"react\"; // import logo from \"./logo.svg\";\n\nimport \"./App.css\";\nimport Square from \"./Square\"; // import styled from \"styled-components\";\n// fromSquare \"10\"\n// toSquare \"21\"\n// mapObj\n// 2. mapObj[toSquare] = mapObj[fromSquare] to the obj\n// 1. delete the property whose key is \"fromSquare\" from mapObj\n// const Div = styled.div({\n//   background: \"yellow\",\n//   opacity: \"1\",\n//   \":hover\": {\n//     background: \"red\",\n//   },\n// });\n\nconst mapObj = {\n  //database of the board\n  \"00\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"01\": {\n    type: \"knight\",\n    player: \"black\"\n  },\n  \"02\": {\n    type: \"bishop\",\n    player: \"black\"\n  },\n  \"03\": {\n    type: \"king\",\n    player: \"black\"\n  },\n  \"04\": {\n    type: \"queen\",\n    player: \"black\"\n  },\n  \"05\": {\n    type: \"bishop\",\n    player: \"black\"\n  },\n  \"06\": {\n    type: \"knight\",\n    player: \"black\"\n  },\n  \"07\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"10\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"11\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"12\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"13\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"14\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"15\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"16\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"17\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"60\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"61\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"62\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"63\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"64\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"65\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"66\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"67\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"70\": {\n    type: \"rook\",\n    player: \"white\"\n  },\n  \"71\": {\n    type: \"knight\",\n    player: \"white\"\n  },\n  \"72\": {\n    type: \"bishop\",\n    player: \"white\"\n  },\n  \"73\": {\n    type: \"king\",\n    player: \"white\"\n  },\n  \"74\": {\n    type: \"queen\",\n    player: \"white\"\n  },\n  \"75\": {\n    type: \"bishop\",\n    player: \"white\"\n  },\n  \"76\": {\n    type: \"knight\",\n    player: \"white\"\n  },\n  \"77\": {\n    type: \"rook\",\n    player: \"white\"\n  }\n};\n\nconst Board = () => {\n  const [count, setCount] = useState(0);\n  const [fromSquare, setFromSquare] = useState();\n  const [player, setPlayer] = useState(true);\n  const [check, setCheck] = useState(false);\n  const [chosen, setChosen] = useState(); // const [toSquare, setToSquare] = useState();\n  // useEffect(() => {\n  //   if (check === true) {\n  //     console.log(\"check is true\");\n  //     setCount(0);\n  //   }\n  // }, 1);\n\n  console.log(chosen);\n  let printCheckOutside;\n  let printPlayerOutside;\n\n  const printCheck = check => {\n    check === false ? printCheckOutside = \"no check at this point\" : printCheckOutside = \"check, please protect your King\";\n  };\n\n  const printPlayer = player => {\n    player === true ? printPlayerOutside = \"white player's turn\" : printPlayerOutside = \"blue player's turn\";\n  };\n\n  printCheck(check);\n  printPlayer(player);\n\n  const moveInvoke = (moveFrom, moveTo) => {\n    // the actual movePiece\n    movePiece(moveFrom, moveTo);\n  };\n\n  check === false ? console.log(\"check false\") : console.log(\"check truth\"); // checking if theres a check in play\n\n  const findKing = startingSquare => {\n    // here we find the king's key (location)\n    const entries = Object.entries(mapObj); // console.log(entries);\n\n    for (let i = 0; i <= entries.length - 1; i++) {\n      let kingIndex;\n\n      if (entries[i][1].type === \"king\") {\n        if (entries[i][1].player !== mapObj[startingSquare].player) {\n          kingIndex = entries[i][0];\n          console.log(\"insideFindKing:\", kingIndex);\n          return kingIndex;\n        }\n      }\n    }\n  }; // useState chosen\n  // caculate which cells i chose and which will be on my path\n  // scan through the cells and paint the chosen\n  // const getTheFigurePath = (moveFrom, moveTo) => {\n  //   const path = [];\n  //   let passingSquare;\n  //   const [moveFromRow, moveFromCol] = splitAndParseToNumber(moveFrom);\n  //   const [moveToRow, moveToCol] = splitAndParseToNumber(moveTo);\n  //   let j = moveFromCol;\n  //   //fill the path with the squares we past\n  //   //check witch is bigger , the rows move from or rows move to . if moveTo rows? then we going down, else going up\n  //   //check the going up movements:TODO - SET IN A OTHER FUNCTION ?\n  //   if (moveFromRow > moveToRow) {\n  //     //going only up the board\n  //     if (moveFromCol === moveToCol) {\n  //       for (let i = moveFromRow; i >= moveToRow; i--) {\n  //         passingSquare = i.toString() + moveFromCol.toString();\n  //         path.push(passingSquare);\n  //       }\n  //     }\n  //     //going up and move left\n  //     else if (moveFromCol > moveToCol) {\n  //       for (let i = moveFromRow; i > moveToRow; i--) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j >= moveToCol) j--;\n  //       }\n  //       path.push(moveTo);\n  //     }\n  //     //move up and turn right\n  //     else if (moveFromCol < moveToCol) {\n  //       for (let i = moveFromRow; i >= moveToRow; i--) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j <= moveToCol) j++;\n  //       }\n  //       path.push(moveTo);\n  //     }\n  //   }\n  //   // Check for the going down movements:\n  //   else {\n  //     //only goes down:\n  //     if (moveFromCol === moveToCol) {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + moveToCol.toString();\n  //         path.push(passingSquare);\n  //       }\n  //       //goes down and right\n  //     } else if (moveFromCol < moveToCol) {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j <= moveToCol) j++;\n  //       }\n  //       //goes down and left\n  //     } else {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + j.toString();\n  //         if (j >= moveToCol) j--;\n  //       }\n  //     }\n  //   }\n  //   return path;\n  // };\n\n\n  const movePawn = (fromMove, toMove) => {\n    // console.log(mapObj[fromSquare].player);\n    if (mapObj[fromSquare].player === \"black\") {\n      // if the pawn is black or white he can go to certain direction and eat a certain way\n      //only the pawns first step may be two steps\n      if (fromMove[0] - toMove[0] === -2) {\n        //only if its the pawn first move it can go two steps\n        if (fromMove[0] === \"1\") {\n          return moveInvoke(fromSquare, toMove);\n        }\n      }\n\n      if (fromMove[0] - toMove[0] === -1) {\n        //normally a pawn can only go straight\n        if (fromMove[1] - toMove[1] === 0) {\n          if (!mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        } else if (fromMove[1] - toMove[1] === 1 || fromMove[1] - toMove[1] === -1) {\n          // in case of eating\n          if (!mapObj[toMove]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        }\n      }\n    }\n\n    if (mapObj[fromSquare].player === \"white\") {\n      if (fromMove[0] - toMove[0] === 2) {\n        //only if its the pawn first move it can go two steps\n        if (fromMove[0] === \"6\") {\n          return moveInvoke(fromSquare, toMove);\n        }\n      } //case of white pawn go straight\n\n\n      if (fromMove[0] - toMove[0] === 1) {\n        if (fromMove[1] - toMove[1] === 0) {\n          if (!mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        } else if (fromMove[1] - toMove[1] === 1 || fromMove[1] - toMove[1] === -1) {\n          //in case of eating\n          if (!mapObj[toMove]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        }\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const moveRook = (fromMove, con) => {\n    // rook can only move straight up\\down or straight left\\right\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex <= 7 || fromToZeroIndex >= -7) {\n      if (fromToOneIndex === 0) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOneIndex <= 7 || fromToOneIndex >= -7) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n  };\n\n  const moveKnight = (fromMove, con) => {\n    // knight logic. if it moves 1 further, it means 2 to the side, if 2 further, 1 to the side.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex === 1 || fromToZeroIndex === -1) {\n      if (fromToOneIndex === -2 || fromToOneIndex === 2) {\n        return moveInvoke(fromMove, con);\n      }\n    } else if (fromToZeroIndex === 2 || fromToZeroIndex === -2) {\n      if (fromToOneIndex === 1 || fromToOneIndex === -1) {\n        return moveInvoke(fromMove, con);\n      }\n    }\n  };\n\n  const moveBishop = (fromMove, con) => {\n    // bishop can only move at an angle on its same color.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    let i = fromToZeroIndex;\n\n    if (fromToZeroIndex === i || fromToZeroIndex === -i) {\n      if (fromToOneIndex === i || fromToOneIndex === -i) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n  };\n\n  const moveQueen = (fromMove, con) => {\n    // can behave as any other piece apart from knight.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    let i = fromToZeroIndex;\n\n    if (fromToZeroIndex === i || fromToZeroIndex === -i || fromToZeroIndex === 0) {\n      if (fromToOneIndex === i || fromToOneIndex === -i || fromToOneIndex === 0) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOneIndex <= 7 || fromToOneIndex >= -7) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const moveKing = (fromMove, con) => {\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex === 1 || fromToZeroIndex === 0 || fromToZeroIndex === -1) {\n      if (fromToOneIndex === 1 || fromToOneIndex === 0 || fromToOneIndex === -1) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n\n    return console.log(\"nah\");\n  }; // const checkPath = (path) => {\n  //   //get an path array\n  //   for (let i = 1; i <= path.length; i++) {\n  //     let figure = path[i];\n  //     if (mapObj[figure]) {\n  //       // console.log(\"figured\");\n  //       // console.log(mapObj[path[0]].type);\n  //       if (mapObj[path[0]].type == \"knight\") {\n  //         return true;\n  //       }\n  //     }\n  //     if (mapObj[figure]) return false;\n  //     if (i === path.length - 1) {\n  //       if (mapObj[figure]) {\n  //         if (mapObj[figure].player !== mapObj[figure].player) {\n  //           return false;\n  //         }\n  //       }\n  //     }\n  //     //if last cell is empty ?\n  //     // if the last cell is the same color as the current player\n  //     //if the last cell is the other color\n  //     //last cell.\n  //   }\n  //   return true;\n  //   // return printCheckOutsidelean\n  // };\n\n\n  const movePiece = (fromSquare, toSquare) => {\n    const movingContent = () => {\n      // here we will move the actual piece from one sqaure to another.\n      console.log(\"inside move\", fromSquare, toSquare); // 1. mapObj[toSquare] = mapObj[fromSquare] to the obj\n      // 2. delete the property whose key is \"fromSquare\" from mapObj\n      // const path = getTheFigurePath(fromSquare, toSquare);\n\n      if (check === true) {\n        return;\n      } // if (!checkPath(path)) return;\n\n\n      mapObj[toSquare] = mapObj[fromSquare];\n      delete mapObj[fromSquare];\n      setPlayer(!player);\n      console.log(\"player is: \", player);\n    };\n\n    if (player === true) {\n      if (mapObj[fromSquare].player === \"white\") {\n        movingContent();\n      }\n    } else if (player === false) {\n      if (mapObj[fromSquare].player === \"black\") {\n        movingContent();\n      }\n    }\n  }; // useEffect(() => {\n  //   console.log(\"inEffect\", fromSquare, toSquare);\n  //   if (fromSquare && toSquare) {\n  //     movePiece(fromSquare, toSquare);\n  //     // setToSquare();\n  //   }\n  // }, [fromSquare, toSquare]);\n\n\n  const parseToNumber = square => {\n    const [row, col] = square.split(\"\");\n    console.log(\"splitted\");\n    return [parseInt(row), parseInt(col)];\n  };\n\n  const addPossibleCellToPath = (nextPossibleRow, nextPossibleCol, nextPossibleMoves) => {\n    const nextPossibleCell = nextPossibleRow.toString() + nextPossibleCol.toString(); //remove the options of jumping above current player figures\n\n    if (mapObj[nextPossibleCell] && mapObj[nextPossibleCell].player === player) return false; //add the last opponent cell, so i can remove him on play, and return to avoid the path to continue\n\n    if (mapObj[nextPossibleCell] && mapObj[nextPossibleCell].player !== player) {\n      nextPossibleMoves[nextPossibleCell] = mapObj[nextPossibleCell];\n      return false;\n    }\n\n    if (!mapObj[nextPossibleCell]) {\n      nextPossibleMoves[nextPossibleCell] = \"empty\";\n    } else nextPossibleMoves[nextPossibleCell] = mapObj[nextPossibleCell];\n\n    return nextPossibleMoves;\n  };\n\n  const findPath = fromSquare => {\n    let nextPossibleMoves = {};\n\n    if (!fromSquare) {\n      return {};\n    } else if (!mapObj[fromSquare]) {\n      return {};\n    }\n\n    const rookFunctionInfo = i => {\n      addPossibleCellToPath(moveFromRow + i, moveFromCol, nextPossibleMoves);\n      addPossibleCellToPath(moveFromRow - i, moveFromCol, nextPossibleMoves);\n      addPossibleCellToPath(moveFromRow, moveFromCol + i, nextPossibleMoves);\n      addPossibleCellToPath(moveFromRow, moveFromCol - i, nextPossibleMoves);\n    };\n\n    if (mapObj[fromSquare].type === \"pawn\") {\n      const getNextPawnMove = squareNumber => {\n        const [moveFromRow, moveFromCol] = parseToNumber(squareNumber);\n\n        if (mapObj[fromSquare].player === \"black\") {\n          if (fromSquare[0] === \"1\") {\n            addPossibleCellToPath(moveFromRow + 2, moveFromCol, nextPossibleMoves);\n            addPossibleCellToPath(moveFromRow + 1, moveFromCol, nextPossibleMoves);\n            return nextPossibleMoves;\n          }\n        }\n\n        if (mapObj[fromSquare].player === \"white\") {\n          if (fromSquare[0] === \"6\") {\n            addPossibleCellToPath(moveFromRow - 2, moveFromCol, nextPossibleMoves);\n            addPossibleCellToPath(moveFromRow - 1, moveFromCol, nextPossibleMoves);\n            return nextPossibleMoves;\n          }\n        }\n\n        addPossibleCellToPath(moveFromRow - 1, moveFromCol, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow + 1, moveFromCol, nextPossibleMoves);\n        return nextPossibleMoves;\n      };\n\n      const result = getNextPawnMove(fromSquare);\n      console.log(\"kkk\", result);\n      return result;\n    }\n\n    console.log(fromSquare, mapObj);\n\n    if (mapObj[fromSquare].type === \"knight\") {\n      const getNextKnightMove = squareNumber => {\n        const [moveFromRow, moveFromCol] = parseToNumber(squareNumber); //[[moveFromRow,moveFromCol],[moveFromCol,moveFromRow]]].\n        // [\n        //   [1, 2],\n        //   [-1, 2],\n        //   [1, -2],\n        //   [-1, -2],\n        // ].reduce((acc, [f1, f2]) => {\n        //   return [\n        //     ...acc,\n        //     [moveFromRow + f1, moveFromCol + f2],\n        //     [moveFromCol + f1, moveFromRow + f2],\n        //   ];\n        // }, []);\n\n        addPossibleCellToPath(moveFromRow - 2, moveFromCol + 1, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow - 2, moveFromCol - 1, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow + 2, moveFromCol + 1, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow + 2, moveFromCol - 1, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow - 1, moveFromCol + 2, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow - 1, moveFromCol - 2, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow + 1, moveFromCol + 2, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow + 1, moveFromCol - 2, nextPossibleMoves);\n        return nextPossibleMoves;\n      };\n\n      const result = getNextKnightMove(fromSquare);\n      console.log(\"kkk\", result);\n      return result;\n    }\n\n    if (mapObj[fromSquare].type === \"rook\") {\n      const getNextRookMove = squareNumber => {\n        const [moveFromRow, moveFromCol] = parseToNumber(squareNumber);\n\n        for (let i = 1; i <= 7; i++) {\n          rookFunctionInfo(i);\n        }\n\n        return nextPossibleMoves;\n      };\n\n      const result = getNextRookMove(fromSquare);\n      console.log(\"kkk\", result);\n      return result;\n    }\n\n    if (mapObj[fromSquare].type === \"bishop\") {\n      const getNextBishopMove = squareNumber => {\n        const [moveFromRow, moveFromCol] = parseToNumber(squareNumber);\n\n        for (let i = 1; i <= 7; i++) {\n          addPossibleCellToPath(moveFromRow + i, moveFromCol + i, nextPossibleMoves);\n          addPossibleCellToPath(moveFromRow - i, moveFromCol - i, nextPossibleMoves);\n          addPossibleCellToPath(moveFromRow + i, moveFromCol - i, nextPossibleMoves);\n          addPossibleCellToPath(moveFromRow - i, moveFromCol + i, nextPossibleMoves);\n        }\n\n        return nextPossibleMoves;\n      };\n\n      const result = getNextBishopMove(fromSquare);\n      console.log(\"kkk\", result);\n      return result;\n    }\n\n    if (mapObj[fromSquare].type === \"queen\") {}\n\n    if (mapObj[fromSquare].type === \"king\") {}\n  };\n\n  const handleClick = con => {\n    console.log(player);\n\n    if (count === 0) {\n      if (!mapObj[con]) {\n        //first spuare to click cant be empty\n        return;\n      }\n    }\n\n    if (count === 0) {\n      setFromSquare(con);\n      setCount(count + 1);\n      console.log(\"this con mada\", con);\n      setChosen(con);\n      console.log(\"chosen:\", chosen);\n      return;\n    } //second click\n    // fromSquare -> toSqaure\n\n\n    if (!mapObj[con] || mapObj[fromSquare].player !== mapObj[con].player) {\n      // const path = getTheFigurePath(fromSquare, con);\n      if (mapObj[fromSquare].type === \"pawn\") {\n        movePawn(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"rook\") {\n        moveRook(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"knight\") {\n        moveKnight(fromSquare, con);\n        console.log(\"now im this con:\", con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"bishop\") {\n        moveBishop(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"king\") {\n        moveKing(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"queen\") {\n        moveQueen(fromSquare, con);\n        setCount(0);\n        return;\n      }\n    }\n\n    setCount(0);\n  };\n\n  console.log(chosen);\n  const path = findPath(chosen);\n  console.log(path);\n  return (\n    /*#__PURE__*/\n    // we will map 8 * 8 of arrays to build our board.\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 5\n      }\n    }, Array(8).fill(0).map((e, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 13\n        }\n      }, Array(8).fill(0).map((e, squareIndex) => {\n        const colorPic = (squareIndex + rowIndex) % 2 === 0 ? \"white\" : \"black\"; // we will caculate the spread of black & white color on the board and identify each square\n\n        const numRow = rowIndex.toString();\n        const numSquare = squareIndex.toString();\n        const con = numRow.concat(numSquare);\n        const piece = mapObj[con];\n        const isHighlighted = path[con] === \"empty\" ? true : false;\n        console.log(isHighlighted);\n        return (\n          /*#__PURE__*/\n          //props\n          React.createElement(Square, {\n            isHighlighted: isHighlighted,\n            color: colorPic,\n            piece: piece,\n            onClick: () => handleClick(con) // onMouseOver={() => handleMouseOver(colorPic)}\n            ,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 21\n            }\n          })\n        );\n      }));\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 7\n      }\n    }, printCheckOutside), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 7\n      }\n    }, printPlayerOutside))\n  );\n};\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/Chess/src/App.js"],"names":["React","useState","useEffect","Square","mapObj","type","player","Board","count","setCount","fromSquare","setFromSquare","setPlayer","check","setCheck","chosen","setChosen","console","log","printCheckOutside","printPlayerOutside","printCheck","printPlayer","moveInvoke","moveFrom","moveTo","movePiece","findKing","startingSquare","entries","Object","i","length","kingIndex","movePawn","fromMove","toMove","moveRook","con","fromToZeroIndex","fromToOneIndex","moveKnight","moveBishop","moveQueen","moveKing","toSquare","movingContent","parseToNumber","square","row","col","split","parseInt","addPossibleCellToPath","nextPossibleRow","nextPossibleCol","nextPossibleMoves","nextPossibleCell","toString","findPath","rookFunctionInfo","moveFromRow","moveFromCol","getNextPawnMove","squareNumber","result","getNextKnightMove","getNextRookMove","getNextBishopMove","handleClick","path","Array","fill","map","e","rowIndex","display","flexDirection","squareIndex","colorPic","numRow","numSquare","concat","piece","isHighlighted","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Square from \"./Square\";\n// import styled from \"styled-components\";\n\n// fromSquare \"10\"\n// toSquare \"21\"\n// mapObj\n// 2. mapObj[toSquare] = mapObj[fromSquare] to the obj\n// 1. delete the property whose key is \"fromSquare\" from mapObj\n\n// const Div = styled.div({\n//   background: \"yellow\",\n//   opacity: \"1\",\n//   \":hover\": {\n//     background: \"red\",\n\n//   },\n// });\nconst mapObj = {\n  //database of the board\n  \"00\": { type: \"rook\", player: \"black\" },\n  \"01\": { type: \"knight\", player: \"black\" },\n  \"02\": { type: \"bishop\", player: \"black\" },\n  \"03\": { type: \"king\", player: \"black\" },\n  \"04\": { type: \"queen\", player: \"black\" },\n  \"05\": { type: \"bishop\", player: \"black\" },\n  \"06\": { type: \"knight\", player: \"black\" },\n  \"07\": { type: \"rook\", player: \"black\" },\n  \"10\": { type: \"pawn\", player: \"black\" },\n  \"11\": { type: \"pawn\", player: \"black\" },\n  \"12\": { type: \"pawn\", player: \"black\" },\n  \"13\": { type: \"pawn\", player: \"black\" },\n  \"14\": { type: \"pawn\", player: \"black\" },\n  \"15\": { type: \"pawn\", player: \"black\" },\n  \"16\": { type: \"pawn\", player: \"black\" },\n  \"17\": { type: \"pawn\", player: \"black\" },\n  \"60\": { type: \"pawn\", player: \"white\" },\n  \"61\": { type: \"pawn\", player: \"white\" },\n  \"62\": { type: \"pawn\", player: \"white\" },\n  \"63\": { type: \"pawn\", player: \"white\" },\n  \"64\": { type: \"pawn\", player: \"white\" },\n  \"65\": { type: \"pawn\", player: \"white\" },\n  \"66\": { type: \"pawn\", player: \"white\" },\n  \"67\": { type: \"pawn\", player: \"white\" },\n  \"70\": { type: \"rook\", player: \"white\" },\n  \"71\": { type: \"knight\", player: \"white\" },\n  \"72\": { type: \"bishop\", player: \"white\" },\n  \"73\": { type: \"king\", player: \"white\" },\n  \"74\": { type: \"queen\", player: \"white\" },\n  \"75\": { type: \"bishop\", player: \"white\" },\n  \"76\": { type: \"knight\", player: \"white\" },\n  \"77\": { type: \"rook\", player: \"white\" },\n};\n\nconst Board = () => {\n  const [count, setCount] = useState(0);\n  const [fromSquare, setFromSquare] = useState();\n  const [player, setPlayer] = useState(true);\n  const [check, setCheck] = useState(false);\n  const [chosen, setChosen] = useState();\n  // const [toSquare, setToSquare] = useState();\n  // useEffect(() => {\n  //   if (check === true) {\n  //     console.log(\"check is true\");\n  //     setCount(0);\n  //   }\n  // }, 1);\n  console.log(chosen);\n\n  let printCheckOutside;\n  let printPlayerOutside;\n  const printCheck = (check) => {\n    check === false\n      ? (printCheckOutside = \"no check at this point\")\n      : (printCheckOutside = \"check, please protect your King\");\n  };\n  const printPlayer = (player) => {\n    player === true\n      ? (printPlayerOutside = \"white player's turn\")\n      : (printPlayerOutside = \"blue player's turn\");\n  };\n  printCheck(check);\n  printPlayer(player);\n  const moveInvoke = (moveFrom, moveTo) => {\n    // the actual movePiece\n    movePiece(moveFrom, moveTo);\n  };\n\n  check === false ? console.log(\"check false\") : console.log(\"check truth\");\n  // checking if theres a check in play\n  const findKing = (startingSquare) => {\n    // here we find the king's key (location)\n    const entries = Object.entries(mapObj);\n    // console.log(entries);\n    for (let i = 0; i <= entries.length - 1; i++) {\n      let kingIndex;\n      if (entries[i][1].type === \"king\") {\n        if (entries[i][1].player !== mapObj[startingSquare].player) {\n          kingIndex = entries[i][0];\n          console.log(\"insideFindKing:\", kingIndex);\n          return kingIndex;\n        }\n      }\n    }\n  };\n\n  // useState chosen\n  // caculate which cells i chose and which will be on my path\n  // scan through the cells and paint the chosen\n\n  // const getTheFigurePath = (moveFrom, moveTo) => {\n  //   const path = [];\n  //   let passingSquare;\n  //   const [moveFromRow, moveFromCol] = splitAndParseToNumber(moveFrom);\n  //   const [moveToRow, moveToCol] = splitAndParseToNumber(moveTo);\n  //   let j = moveFromCol;\n  //   //fill the path with the squares we past\n  //   //check witch is bigger , the rows move from or rows move to . if moveTo rows? then we going down, else going up\n  //   //check the going up movements:TODO - SET IN A OTHER FUNCTION ?\n  //   if (moveFromRow > moveToRow) {\n  //     //going only up the board\n  //     if (moveFromCol === moveToCol) {\n  //       for (let i = moveFromRow; i >= moveToRow; i--) {\n  //         passingSquare = i.toString() + moveFromCol.toString();\n  //         path.push(passingSquare);\n  //       }\n  //     }\n  //     //going up and move left\n  //     else if (moveFromCol > moveToCol) {\n  //       for (let i = moveFromRow; i > moveToRow; i--) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j >= moveToCol) j--;\n  //       }\n  //       path.push(moveTo);\n  //     }\n  //     //move up and turn right\n  //     else if (moveFromCol < moveToCol) {\n  //       for (let i = moveFromRow; i >= moveToRow; i--) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j <= moveToCol) j++;\n  //       }\n  //       path.push(moveTo);\n  //     }\n  //   }\n  //   // Check for the going down movements:\n  //   else {\n  //     //only goes down:\n  //     if (moveFromCol === moveToCol) {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + moveToCol.toString();\n  //         path.push(passingSquare);\n  //       }\n  //       //goes down and right\n  //     } else if (moveFromCol < moveToCol) {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + j.toString();\n  //         path.push(passingSquare);\n  //         if (j <= moveToCol) j++;\n  //       }\n  //       //goes down and left\n  //     } else {\n  //       for (let i = moveFromRow; i <= moveToRow; i++) {\n  //         passingSquare = i.toString() + j.toString();\n  //         if (j >= moveToCol) j--;\n  //       }\n  //     }\n  //   }\n  //   return path;\n  // };\n\n  const movePawn = (fromMove, toMove) => {\n    // console.log(mapObj[fromSquare].player);\n    if (mapObj[fromSquare].player === \"black\") {\n      // if the pawn is black or white he can go to certain direction and eat a certain way\n      //only the pawns first step may be two steps\n      if (fromMove[0] - toMove[0] === -2) {\n        //only if its the pawn first move it can go two steps\n        if (fromMove[0] === \"1\") {\n          return moveInvoke(fromSquare, toMove);\n        }\n      }\n      if (fromMove[0] - toMove[0] === -1) {\n        //normally a pawn can only go straight\n        if (fromMove[1] - toMove[1] === 0) {\n          if (!mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        } else if (\n          fromMove[1] - toMove[1] === 1 ||\n          fromMove[1] - toMove[1] === -1\n        ) {\n          // in case of eating\n          if (!mapObj[toMove]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        }\n      }\n    }\n    if (mapObj[fromSquare].player === \"white\") {\n      if (fromMove[0] - toMove[0] === 2) {\n        //only if its the pawn first move it can go two steps\n        if (fromMove[0] === \"6\") {\n          return moveInvoke(fromSquare, toMove);\n        }\n      }\n      //case of white pawn go straight\n      if (fromMove[0] - toMove[0] === 1) {\n        if (fromMove[1] - toMove[1] === 0) {\n          if (!mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        } else if (\n          fromMove[1] - toMove[1] === 1 ||\n          fromMove[1] - toMove[1] === -1\n        ) {\n          //in case of eating\n          if (!mapObj[toMove]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[toMove]) {\n            return moveInvoke(fromSquare, toMove);\n          }\n        }\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const moveRook = (fromMove, con) => {\n    // rook can only move straight up\\down or straight left\\right\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (fromToZeroIndex <= 7 || fromToZeroIndex >= -7) {\n      if (fromToOneIndex === 0) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOneIndex <= 7 || fromToOneIndex >= -7) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n  };\n  const moveKnight = (fromMove, con) => {\n    // knight logic. if it moves 1 further, it means 2 to the side, if 2 further, 1 to the side.\n\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    if (fromToZeroIndex === 1 || fromToZeroIndex === -1) {\n      if (fromToOneIndex === -2 || fromToOneIndex === 2) {\n        return moveInvoke(fromMove, con);\n      }\n    } else if (fromToZeroIndex === 2 || fromToZeroIndex === -2) {\n      if (fromToOneIndex === 1 || fromToOneIndex === -1) {\n        return moveInvoke(fromMove, con);\n      }\n    }\n  };\n\n  const moveBishop = (fromMove, con) => {\n    // bishop can only move at an angle on its same color.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    let i = fromToZeroIndex;\n    if (fromToZeroIndex === i || fromToZeroIndex === -i) {\n      if (fromToOneIndex === i || fromToOneIndex === -i) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n  };\n  const moveQueen = (fromMove, con) => {\n    // can behave as any other piece apart from knight.\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n    let i = fromToZeroIndex;\n    if (\n      fromToZeroIndex === i ||\n      fromToZeroIndex === -i ||\n      fromToZeroIndex === 0\n    ) {\n      if (\n        fromToOneIndex === i ||\n        fromToOneIndex === -i ||\n        fromToOneIndex === 0\n      ) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOneIndex <= 7 || fromToOneIndex >= -7) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const moveKing = (fromMove, con) => {\n    const fromToZeroIndex = fromMove[0] - con[0];\n    const fromToOneIndex = fromMove[1] - con[1];\n\n    if (\n      fromToZeroIndex === 1 ||\n      fromToZeroIndex === 0 ||\n      fromToZeroIndex === -1\n    ) {\n      if (\n        fromToOneIndex === 1 ||\n        fromToOneIndex === 0 ||\n        fromToOneIndex === -1\n      ) {\n        return moveInvoke(fromSquare, con);\n      }\n    }\n    return console.log(\"nah\");\n  };\n\n  // const checkPath = (path) => {\n  //   //get an path array\n  //   for (let i = 1; i <= path.length; i++) {\n  //     let figure = path[i];\n  //     if (mapObj[figure]) {\n  //       // console.log(\"figured\");\n  //       // console.log(mapObj[path[0]].type);\n  //       if (mapObj[path[0]].type == \"knight\") {\n  //         return true;\n  //       }\n  //     }\n  //     if (mapObj[figure]) return false;\n  //     if (i === path.length - 1) {\n  //       if (mapObj[figure]) {\n  //         if (mapObj[figure].player !== mapObj[figure].player) {\n  //           return false;\n  //         }\n  //       }\n  //     }\n  //     //if last cell is empty ?\n  //     // if the last cell is the same color as the current player\n  //     //if the last cell is the other color\n\n  //     //last cell.\n  //   }\n  //   return true;\n  //   // return printCheckOutsidelean\n  // };\n\n  const movePiece = (fromSquare, toSquare) => {\n    const movingContent = () => {\n      // here we will move the actual piece from one sqaure to another.\n      console.log(\"inside move\", fromSquare, toSquare);\n      // 1. mapObj[toSquare] = mapObj[fromSquare] to the obj\n      // 2. delete the property whose key is \"fromSquare\" from mapObj\n      // const path = getTheFigurePath(fromSquare, toSquare);\n      if (check === true) {\n        return;\n      }\n      // if (!checkPath(path)) return;\n      mapObj[toSquare] = mapObj[fromSquare];\n      delete mapObj[fromSquare];\n      setPlayer(!player);\n      console.log(\"player is: \", player);\n    };\n    if (player === true) {\n      if (mapObj[fromSquare].player === \"white\") {\n        movingContent();\n      }\n    } else if (player === false) {\n      if (mapObj[fromSquare].player === \"black\") {\n        movingContent();\n      }\n    }\n  };\n  // useEffect(() => {\n  //   console.log(\"inEffect\", fromSquare, toSquare);\n  //   if (fromSquare && toSquare) {\n  //     movePiece(fromSquare, toSquare);\n  //     // setToSquare();\n  //   }\n  // }, [fromSquare, toSquare]);\n\n  const parseToNumber = (square) => {\n    const [row, col] = square.split(\"\");\n    console.log(\"splitted\");\n    return [parseInt(row), parseInt(col)];\n  };\n\n  const addPossibleCellToPath = (\n    nextPossibleRow,\n    nextPossibleCol,\n    nextPossibleMoves\n  ) => {\n    const nextPossibleCell =\n      nextPossibleRow.toString() + nextPossibleCol.toString();\n    //remove the options of jumping above current player figures\n    if (mapObj[nextPossibleCell] && mapObj[nextPossibleCell].player === player)\n      return false;\n    //add the last opponent cell, so i can remove him on play, and return to avoid the path to continue\n    if (\n      mapObj[nextPossibleCell] &&\n      mapObj[nextPossibleCell].player !== player\n    ) {\n      nextPossibleMoves[nextPossibleCell] = mapObj[nextPossibleCell];\n      return false;\n    }\n    if (!mapObj[nextPossibleCell]) {\n      nextPossibleMoves[nextPossibleCell] = \"empty\";\n    } else nextPossibleMoves[nextPossibleCell] = mapObj[nextPossibleCell];\n    return nextPossibleMoves;\n  };\n\n  const findPath = (fromSquare) => {\n    let nextPossibleMoves = {};\n    if (!fromSquare) {\n      return {};\n    } else if (!mapObj[fromSquare]) {\n      return {};\n    }\n    const rookFunctionInfo = (i) => {\n      addPossibleCellToPath(moveFromRow + i, moveFromCol, nextPossibleMoves);\n      addPossibleCellToPath(moveFromRow - i, moveFromCol, nextPossibleMoves);\n      addPossibleCellToPath(moveFromRow, moveFromCol + i, nextPossibleMoves);\n      addPossibleCellToPath(moveFromRow, moveFromCol - i, nextPossibleMoves);\n    };\n    if (mapObj[fromSquare].type === \"pawn\") {\n      const getNextPawnMove = (squareNumber) => {\n        const [moveFromRow, moveFromCol] = parseToNumber(squareNumber);\n        if (mapObj[fromSquare].player === \"black\") {\n          if (fromSquare[0] === \"1\") {\n            addPossibleCellToPath(\n              moveFromRow + 2,\n              moveFromCol,\n              nextPossibleMoves\n            );\n            addPossibleCellToPath(\n              moveFromRow + 1,\n              moveFromCol,\n              nextPossibleMoves\n            );\n            return nextPossibleMoves;\n          }\n        }\n        if (mapObj[fromSquare].player === \"white\") {\n          if (fromSquare[0] === \"6\") {\n            addPossibleCellToPath(\n              moveFromRow - 2,\n              moveFromCol,\n              nextPossibleMoves\n            );\n            addPossibleCellToPath(\n              moveFromRow - 1,\n              moveFromCol,\n              nextPossibleMoves\n            );\n            return nextPossibleMoves;\n          }\n        }\n        addPossibleCellToPath(moveFromRow - 1, moveFromCol, nextPossibleMoves);\n        addPossibleCellToPath(moveFromRow + 1, moveFromCol, nextPossibleMoves);\n        return nextPossibleMoves;\n      };\n      const result = getNextPawnMove(fromSquare);\n      console.log(\"kkk\", result);\n      return result;\n    }\n    console.log(fromSquare, mapObj);\n    if (mapObj[fromSquare].type === \"knight\") {\n      const getNextKnightMove = (squareNumber) => {\n        const [moveFromRow, moveFromCol] = parseToNumber(squareNumber);\n\n        //[[moveFromRow,moveFromCol],[moveFromCol,moveFromRow]]].\n        // [\n        //   [1, 2],\n        //   [-1, 2],\n        //   [1, -2],\n        //   [-1, -2],\n        // ].reduce((acc, [f1, f2]) => {\n        //   return [\n        //     ...acc,\n        //     [moveFromRow + f1, moveFromCol + f2],\n        //     [moveFromCol + f1, moveFromRow + f2],\n        //   ];\n        // }, []);\n\n        addPossibleCellToPath(\n          moveFromRow - 2,\n          moveFromCol + 1,\n          nextPossibleMoves\n        );\n        addPossibleCellToPath(\n          moveFromRow - 2,\n          moveFromCol - 1,\n          nextPossibleMoves\n        );\n        addPossibleCellToPath(\n          moveFromRow + 2,\n          moveFromCol + 1,\n          nextPossibleMoves\n        );\n        addPossibleCellToPath(\n          moveFromRow + 2,\n          moveFromCol - 1,\n          nextPossibleMoves\n        );\n\n        addPossibleCellToPath(\n          moveFromRow - 1,\n          moveFromCol + 2,\n          nextPossibleMoves\n        );\n        addPossibleCellToPath(\n          moveFromRow - 1,\n          moveFromCol - 2,\n          nextPossibleMoves\n        );\n        addPossibleCellToPath(\n          moveFromRow + 1,\n          moveFromCol + 2,\n          nextPossibleMoves\n        );\n        addPossibleCellToPath(\n          moveFromRow + 1,\n          moveFromCol - 2,\n          nextPossibleMoves\n        );\n        return nextPossibleMoves;\n      };\n      const result = getNextKnightMove(fromSquare);\n      console.log(\"kkk\", result);\n      return result;\n    }\n    if (mapObj[fromSquare].type === \"rook\") {\n      const getNextRookMove = (squareNumber) => {\n        const [moveFromRow, moveFromCol] = parseToNumber(squareNumber);\n        for (let i = 1; i <= 7; i++) {\n          rookFunctionInfo(i);\n        }\n        return nextPossibleMoves;\n      };\n      const result = getNextRookMove(fromSquare);\n      console.log(\"kkk\", result);\n      return result;\n    }\n    if (mapObj[fromSquare].type === \"bishop\") {\n      const getNextBishopMove = (squareNumber) => {\n        const [moveFromRow, moveFromCol] = parseToNumber(squareNumber);\n        for (let i = 1; i <= 7; i++) {\n          addPossibleCellToPath(\n            moveFromRow + i,\n            moveFromCol + i,\n            nextPossibleMoves\n          );\n          addPossibleCellToPath(\n            moveFromRow - i,\n            moveFromCol - i,\n            nextPossibleMoves\n          );\n          addPossibleCellToPath(\n            moveFromRow + i,\n            moveFromCol - i,\n            nextPossibleMoves\n          );\n          addPossibleCellToPath(\n            moveFromRow - i,\n            moveFromCol + i,\n            nextPossibleMoves\n          );\n        }\n        return nextPossibleMoves;\n      };\n      const result = getNextBishopMove(fromSquare);\n      console.log(\"kkk\", result);\n      return result;\n    }\n    if (mapObj[fromSquare].type === \"queen\") {\n    }\n    if (mapObj[fromSquare].type === \"king\") {\n    }\n  };\n  const handleClick = (con) => {\n    console.log(player);\n    if (count === 0) {\n      if (!mapObj[con]) {\n        //first spuare to click cant be empty\n        return;\n      }\n    }\n    if (count === 0) {\n      setFromSquare(con);\n      setCount(count + 1);\n      console.log(\"this con mada\", con);\n      setChosen(con);\n      console.log(\"chosen:\", chosen);\n      return;\n    }\n    //second click\n    // fromSquare -> toSqaure\n    if (!mapObj[con] || mapObj[fromSquare].player !== mapObj[con].player) {\n      // const path = getTheFigurePath(fromSquare, con);\n\n      if (mapObj[fromSquare].type === \"pawn\") {\n        movePawn(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"rook\") {\n        moveRook(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"knight\") {\n        moveKnight(fromSquare, con);\n        console.log(\"now im this con:\", con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"bishop\") {\n        moveBishop(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"king\") {\n        moveKing(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"queen\") {\n        moveQueen(fromSquare, con);\n        setCount(0);\n        return;\n      }\n    }\n    setCount(0);\n  };\n  console.log(chosen);\n  const path = findPath(chosen);\n  console.log(path);\n\n  return (\n    // we will map 8 * 8 of arrays to build our board.\n    <div>\n      {Array(8)\n        .fill(0)\n        .map((e, rowIndex) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n              }}\n            >\n              {Array(8)\n                .fill(0)\n                .map((e, squareIndex) => {\n                  const colorPic =\n                    (squareIndex + rowIndex) % 2 === 0 ? \"white\" : \"black\";\n                  // we will caculate the spread of black & white color on the board and identify each square\n                  const numRow = rowIndex.toString();\n                  const numSquare = squareIndex.toString();\n                  const con = numRow.concat(numSquare);\n                  const piece = mapObj[con];\n                  const isHighlighted = path[con] === \"empty\" ? true : false;\n                  console.log(isHighlighted);\n                  return (\n                    //props\n                    <Square\n                      isHighlighted={isHighlighted}\n                      color={colorPic}\n                      piece={piece}\n                      onClick={() => handleClick(con)}\n\n                      // onMouseOver={() => handleMouseOver(colorPic)}\n                    />\n                  );\n                })}\n            </div>\n          );\n        })}\n      <h1>{printCheckOutside}</h1>\n      <h1>{printPlayerOutside}</h1>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}