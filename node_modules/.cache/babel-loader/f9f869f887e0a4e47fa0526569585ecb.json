{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Chess/src/App.js\";\nimport React, { useState, useEffect } from \"react\"; // import logo from \"./logo.svg\";\n\nimport \"./App.css\";\nimport Square from \"./Square\"; // import styled from \"styled-components\";\n// fromSquare \"10\"\n// toSquare \"21\"\n// mapObj\n// 2. mapObj[toSquare] = mapObj[fromSquare] to the obj\n// 1. delete the property whose key is \"fromSquare\" from mapObj\n// const Div = styled.div({\n//   background: \"yellow\",\n//   opacity: \"1\",\n//   \":hover\": {\n//     background: \"red\",\n//   },\n// });\n\nconst mapObj = {\n  //database of the board\n  \"00\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"01\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"01\": {\n    type: \"knight\",\n    player: \"black\"\n  },\n  \"02\": {\n    type: \"bishop\",\n    player: \"black\"\n  },\n  \"03\": {\n    type: \"king\",\n    player: \"black\"\n  },\n  \"04\": {\n    type: \"queen\",\n    player: \"black\"\n  },\n  \"05\": {\n    type: \"bishop\",\n    player: \"black\"\n  },\n  \"06\": {\n    type: \"knight\",\n    player: \"black\"\n  },\n  \"07\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"10\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"11\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"12\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"13\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"14\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"15\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"16\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"17\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"60\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"61\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"62\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"63\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"64\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"65\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"66\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"67\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"70\": {\n    type: \"rook\",\n    player: \"white\"\n  },\n  \"71\": {\n    type: \"knight\",\n    player: \"white\"\n  },\n  \"72\": {\n    type: \"bishop\",\n    player: \"white\"\n  },\n  \"73\": {\n    type: \"queen\",\n    player: \"white\"\n  },\n  \"74\": {\n    type: \"king\",\n    player: \"white\"\n  },\n  \"75\": {\n    type: \"bishop\",\n    player: \"white\"\n  },\n  \"76\": {\n    type: \"knight\",\n    player: \"white\"\n  },\n  \"77\": {\n    type: \"rook\",\n    player: \"white\"\n  }\n}; // movePiece(\"10\", \"30\");\n\nconst Board = () => {\n  const [count, setCount] = useState(0);\n  const [fromSquare, setFromSquare] = useState();\n  const [player, setPlayer] = useState(1); // const [toSquare, setToSquare] = useState();\n\n  const splitAndParseToNumber = square => {\n    const [row, col] = square.split(\"\");\n    console.log(\"splitted\");\n    return [parseInt(row), parseInt(col)];\n  };\n\n  const getTheFigurePath = (moveFrom, moveTo) => {\n    const path = [];\n    let passingSquare;\n    const [moveFromRow, moveFromCol] = splitAndParseToNumber(moveFrom);\n    const [moveToRow, moveToCol] = splitAndParseToNumber(moveTo);\n    let j = moveFromCol; //fill the path with the squares we past\n    //check witch is bigger , the rows move from or rows move to . if moveTo rows? then we going down, else going up\n    //check the going up movements:TODO - SET IN A OTHER FUNCTION ?\n\n    if (moveFromRow > moveToRow) {\n      //going only up the board\n      if (moveFromCol === moveToCol) {\n        for (let i = moveFromRow; i >= moveToRow; i--) {\n          passingSquare = i.toString() + moveFromCol.toString();\n          path.push(passingSquare);\n        }\n      } //going up and move left\n      else if (moveFromCol > moveToCol) {\n          for (let i = moveFromRow; i >= moveToRow; i--) {\n            passingSquare = i.toString() + j.toString();\n            path.push(passingSquare);\n            if (j >= moveToCol) j--;\n          }\n        } //move up and turn right\n        else if (moveFromCol < moveToCol) {\n            for (let i = moveFromRow; i >= moveToRow; i--) {\n              passingSquare = i.toString() + j.toString();\n              path.push(passingSquare);\n              if (j <= moveToCol) j++;\n            }\n          }\n    } // Check for the going down movements:\n    else {\n        //only goes down:\n        if (moveFromCol === moveToCol) {\n          for (let i = moveFromRow; i <= moveToRow; i++) {\n            passingSquare = i.toString() + moveToCol.toString();\n            path.push(passingSquare);\n          } //goes down and right\n\n        } else if (moveFromCol < moveToCol) {\n          for (let i = moveFromRow; i <= moveToRow; i++) {\n            passingSquare = i.toString() + j.toString();\n            path.push(passingSquare);\n            if (j <= moveToCol) j++;\n          } //goes down and left\n\n        } else {\n          for (let i = moveFromRow; i <= moveToRow; i++) {\n            passingSquare = i.toString() + j.toString();\n            if (j >= moveToCol) j--;\n          }\n        }\n      }\n\n    return path;\n  };\n\n  const movePawn = (fromMove, con) => {\n    console.log(mapObj[fromSquare].player);\n\n    if (mapObj[fromSquare].player === \"black\") {\n      // if the pawn is black or white he can go to certain direction and eat a certain way so it wont be\n      // able to move backwards or eat in a forbidden way.\n      if (fromMove[0] - con[0] === -1) {\n        if (fromMove[1] - con[1] === 0) {\n          if (!mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        } else if (fromMove[1] - con[1] === 1 || fromMove[1] - con[1] === -1) {\n          if (!mapObj[con]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        }\n      }\n    }\n\n    if (mapObj[fromSquare].player === \"white\") {\n      if (fromMove[0] - con[0] === 1) {\n        if (fromMove[1] - con[1] === 0) {\n          if (!mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        } else if (fromMove[1] - con[1] === 1 || fromMove[1] - con[1] === -1) {\n          if (!mapObj[con]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        }\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const moveRook = (fromMove, con) => {\n    // rook can only move straight up\\down or straight left\\right\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero <= 7 || fromToZero >= -7) {\n      if (fromToOne === 0) {\n        return movePiece(fromSquare, con);\n      }\n    }\n\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOne <= 7 || fromToOne >= -7) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n\n  const moveKnight = (fromMove, con) => {\n    // knight logic. if it moves 1 further, it means 2 to the side, if 2 further, 1 to the side.\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero === 1 || fromToZero === -1) {\n      if (fromToOne === -2 || fromToOne === 2) {\n        return movePiece(fromSquare, con);\n      }\n    } else if (fromToZero === 2 || fromToZero === -2) {\n      if (fromToOne === 1 || fromToOne === -1) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n\n  const moveBishop = (fromMove, con) => {\n    // bishop can only move at an angle on its same color.\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    let i = fromToZero;\n\n    if (fromToZero === i || fromToZero === -i) {\n      if (fromToOne === i || fromToOne === -i) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n\n  const moveQueen = (fromMove, con) => {\n    // can behave as any other piece apart from knight.\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    let i = fromToZero;\n\n    if (fromToZero === i || fromToZero === -i || fromToZero === 0) {\n      if (fromToOne === i || fromToOne === -i || fromToOne === 0) {\n        return movePiece(fromSquare, con);\n      }\n    }\n\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOne <= 7 || fromToOne >= -7) {\n        return movePiece(fromSquare, con);\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const moveKing = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero === 1 || fromToZero === 0 || fromToZero === -1) {\n      if (fromToOne === 1 || fromToOne === 0 || fromToOne === -1) {\n        return movePiece(fromSquare, con);\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const checkPath = path => {\n    //get an path array\n    // [\"67\",\"57\"]\n    if (mapObj[path[0]].type === \"bishop\") return;\n\n    for (let i = 1; i <= path.length; i++) {\n      let figure = path[i];\n      if (mapObj[figure]) return false;\n\n      if (i === path.length - 1) {\n        if (mapObj[figure]) {\n          if (mapObj[figure].player !== mapObj[figure]) {}\n        }\n      } //if last cell is empty ?\n      // if the last cell is the same color as the current player\n      //if the last cell is the other color\n      //last cell.\n\n    }\n\n    return true; // return boolean\n  };\n\n  const movePiece = (fromSquare, toSquare) => {\n    // here we will move the actual piece from one sqaure to another.\n    console.log(\"inside move\", fromSquare, toSquare); // 1. mapObj[toSquare] = mapObj[fromSquare] to the obj\n    // 2. delete the property whose key is \"fromSquare\" from mapObj\n\n    const path = getTheFigurePath(fromSquare, toSquare);\n    if (!checkPath(path)) return;\n    mapObj[toSquare] = mapObj[fromSquare];\n    delete mapObj[fromSquare];\n  }; // useEffect(() => {\n  //   console.log(\"inEffect\", fromSquare, toSquare);\n  //   if (fromSquare && toSquare) {\n  //     movePiece(fromSquare, toSquare);\n  //     // setToSquare();\n  //   }\n  // }, [fromSquare, toSquare]);\n  // console.log(\"fromSquare:\", fromSquare);\n  // console.log(\"ToSquare:\", toSquare);\n  // const borderHover = \"black solid 1px\";\n  // console.log(borderHover);\n  // let isHovered = false;\n  // const handleMouseOver = (colorPic, borderHover) => {\n  //   if (count === 0) {\n  //     // borderHover = \"red solid 1px\";\n  //     // console.log(borderHover);\n  //     // console.log(\"color:\", colorPic);\n  //     isHovered = true;\n  //     // colorPic = \"black\";\n  //     // console.log(\"color2:\", colorPic);P\n  //     console.log(isHovered);\n  //   }\n  // };\n\n\n  const handleClick = con => {\n    if (count === 0) {\n      if (!mapObj[con]) {\n        return;\n      }\n    }\n\n    if (count === 0) {\n      setFromSquare(con);\n      setCount(count + 1);\n      return;\n    } //second click\n    // fromSquare -> toSqaure\n\n\n    if (!mapObj[con] || mapObj[fromSquare].player !== mapObj[con].player) {\n      getTheFigurePath(fromSquare, con);\n\n      if (mapObj[fromSquare].type === \"pawn\") {\n        movePawn(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"rook\") {\n        moveRook(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"knight\") {\n        moveKnight(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"bishop\") {\n        moveBishop(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"king\") {\n        moveKing(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"queen\") {\n        moveQueen(fromSquare, con);\n        setCount(0);\n        return;\n      }\n    }\n\n    setCount(0);\n  };\n\n  return (\n    /*#__PURE__*/\n    // we will map 8 * 8 of arrays to build our board.\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 5\n      }\n    }, Array(8).fill(0).map((e, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }\n      }, Array(8).fill(0).map((e, squareIndex) => {\n        const colorPic = (squareIndex + rowIndex) % 2 === 0 ? \"white\" : \"black\"; // we will caculate the spread of black & white color on the board and identify each square\n\n        const numRow = rowIndex.toString();\n        const numSquare = squareIndex.toString();\n        const con = numRow.concat(numSquare);\n        const piece = mapObj[con];\n        return (\n          /*#__PURE__*/\n          //props\n          React.createElement(Square, {\n            color: colorPic,\n            piece: piece,\n            onClick: () => handleClick(con) // onMouseOver={() => handleMouseOver(colorPic)}\n            ,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 21\n            }\n          })\n        );\n      }));\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 7\n      }\n    }, \"clock\"))\n  );\n  /* return (\n    <div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n      </div>\n       <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"black\" }} />\n      </div>\n    </div>\n   );*/\n};\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/Chess/src/App.js"],"names":["React","useState","useEffect","Square","mapObj","type","player","Board","count","setCount","fromSquare","setFromSquare","setPlayer","splitAndParseToNumber","square","row","col","split","console","log","parseInt","getTheFigurePath","moveFrom","moveTo","path","passingSquare","moveFromRow","moveFromCol","moveToRow","moveToCol","j","i","toString","push","movePawn","fromMove","con","movePiece","moveRook","fromToZero","fromToOne","moveKnight","moveBishop","moveQueen","moveKing","checkPath","length","figure","toSquare","handleClick","Array","fill","map","e","rowIndex","display","flexDirection","squareIndex","colorPic","numRow","numSquare","concat","piece","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Square from \"./Square\";\n// import styled from \"styled-components\";\n\n// fromSquare \"10\"\n// toSquare \"21\"\n// mapObj\n// 2. mapObj[toSquare] = mapObj[fromSquare] to the obj\n// 1. delete the property whose key is \"fromSquare\" from mapObj\n\n// const Div = styled.div({\n//   background: \"yellow\",\n//   opacity: \"1\",\n//   \":hover\": {\n//     background: \"red\",\n\n//   },\n// });\n\nconst mapObj = {\n  //database of the board\n  \"00\": { type: \"rook\", player: \"black\" },\n  \"01\": { type: \"rook\", player: \"black\" },\n  \"01\": { type: \"knight\", player: \"black\" },\n  \"02\": { type: \"bishop\", player: \"black\" },\n  \"03\": { type: \"king\", player: \"black\" },\n  \"04\": { type: \"queen\", player: \"black\" },\n  \"05\": { type: \"bishop\", player: \"black\" },\n  \"06\": { type: \"knight\", player: \"black\" },\n  \"07\": { type: \"rook\", player: \"black\" },\n  \"10\": { type: \"pawn\", player: \"black\" },\n  \"11\": { type: \"pawn\", player: \"black\" },\n  \"12\": { type: \"pawn\", player: \"black\" },\n  \"13\": { type: \"pawn\", player: \"black\" },\n  \"14\": { type: \"pawn\", player: \"black\" },\n  \"15\": { type: \"pawn\", player: \"black\" },\n  \"16\": { type: \"pawn\", player: \"black\" },\n  \"17\": { type: \"pawn\", player: \"black\" },\n  \"60\": { type: \"pawn\", player: \"white\" },\n  \"61\": { type: \"pawn\", player: \"white\" },\n  \"62\": { type: \"pawn\", player: \"white\" },\n  \"63\": { type: \"pawn\", player: \"white\" },\n  \"64\": { type: \"pawn\", player: \"white\" },\n  \"65\": { type: \"pawn\", player: \"white\" },\n  \"66\": { type: \"pawn\", player: \"white\" },\n  \"67\": { type: \"pawn\", player: \"white\" },\n  \"70\": { type: \"rook\", player: \"white\" },\n  \"71\": { type: \"knight\", player: \"white\" },\n  \"72\": { type: \"bishop\", player: \"white\" },\n  \"73\": { type: \"queen\", player: \"white\" },\n  \"74\": { type: \"king\", player: \"white\" },\n  \"75\": { type: \"bishop\", player: \"white\" },\n  \"76\": { type: \"knight\", player: \"white\" },\n  \"77\": { type: \"rook\", player: \"white\" },\n};\n\n// movePiece(\"10\", \"30\");\n\nconst Board = () => {\n  const [count, setCount] = useState(0);\n  const [fromSquare, setFromSquare] = useState();\n  const [player, setPlayer] = useState(1);\n  // const [toSquare, setToSquare] = useState();\n\n  const splitAndParseToNumber = (square) => {\n    const [row, col] = square.split(\"\");\n    console.log(\"splitted\");\n    return [parseInt(row), parseInt(col)];\n  };\n\n  const getTheFigurePath = (moveFrom, moveTo) => {\n    const path = [];\n    let passingSquare;\n    const [moveFromRow, moveFromCol] = splitAndParseToNumber(moveFrom);\n    const [moveToRow, moveToCol] = splitAndParseToNumber(moveTo);\n    let j = moveFromCol;\n    //fill the path with the squares we past\n    //check witch is bigger , the rows move from or rows move to . if moveTo rows? then we going down, else going up\n    //check the going up movements:TODO - SET IN A OTHER FUNCTION ?\n    if (moveFromRow > moveToRow) {\n      //going only up the board\n      if (moveFromCol === moveToCol) {\n        for (let i = moveFromRow; i >= moveToRow; i--) {\n          passingSquare = i.toString() + moveFromCol.toString();\n          path.push(passingSquare);\n        }\n      }\n      //going up and move left\n      else if (moveFromCol > moveToCol) {\n        for (let i = moveFromRow; i >= moveToRow; i--) {\n          passingSquare = i.toString() + j.toString();\n          path.push(passingSquare);\n          if (j >= moveToCol) j--;\n        }\n      }\n      //move up and turn right\n      else if (moveFromCol < moveToCol) {\n        for (let i = moveFromRow; i >= moveToRow; i--) {\n          passingSquare = i.toString() + j.toString();\n          path.push(passingSquare);\n          if (j <= moveToCol) j++;\n        }\n      }\n    }\n    // Check for the going down movements:\n    else {\n      //only goes down:\n      if (moveFromCol === moveToCol) {\n        for (let i = moveFromRow; i <= moveToRow; i++) {\n          passingSquare = i.toString() + moveToCol.toString();\n          path.push(passingSquare);\n        }\n        //goes down and right\n      } else if (moveFromCol < moveToCol) {\n        for (let i = moveFromRow; i <= moveToRow; i++) {\n          passingSquare = i.toString() + j.toString();\n          path.push(passingSquare);\n          if (j <= moveToCol) j++;\n        }\n        //goes down and left\n      } else {\n        for (let i = moveFromRow; i <= moveToRow; i++) {\n          passingSquare = i.toString() + j.toString();\n          if (j >= moveToCol) j--;\n        }\n      }\n    }\n    return path;\n  };\n\n  const movePawn = (fromMove, con) => {\n    console.log(mapObj[fromSquare].player);\n    if (mapObj[fromSquare].player === \"black\") {\n      // if the pawn is black or white he can go to certain direction and eat a certain way so it wont be\n      // able to move backwards or eat in a forbidden way.\n      if (fromMove[0] - con[0] === -1) {\n        if (fromMove[1] - con[1] === 0) {\n          if (!mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        } else if (fromMove[1] - con[1] === 1 || fromMove[1] - con[1] === -1) {\n          if (!mapObj[con]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        }\n      }\n    }\n    if (mapObj[fromSquare].player === \"white\") {\n      if (fromMove[0] - con[0] === 1) {\n        if (fromMove[1] - con[1] === 0) {\n          if (!mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        } else if (fromMove[1] - con[1] === 1 || fromMove[1] - con[1] === -1) {\n          if (!mapObj[con]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        }\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const moveRook = (fromMove, con) => {\n    // rook can only move straight up\\down or straight left\\right\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero <= 7 || fromToZero >= -7) {\n      if (fromToOne === 0) {\n        return movePiece(fromSquare, con);\n      }\n    }\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOne <= 7 || fromToOne >= -7) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n  const moveKnight = (fromMove, con) => {\n    // knight logic. if it moves 1 further, it means 2 to the side, if 2 further, 1 to the side.\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    if (fromToZero === 1 || fromToZero === -1) {\n      if (fromToOne === -2 || fromToOne === 2) {\n        return movePiece(fromSquare, con);\n      }\n    } else if (fromToZero === 2 || fromToZero === -2) {\n      if (fromToOne === 1 || fromToOne === -1) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n  const moveBishop = (fromMove, con) => {\n    // bishop can only move at an angle on its same color.\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    let i = fromToZero;\n    if (fromToZero === i || fromToZero === -i) {\n      if (fromToOne === i || fromToOne === -i) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n  const moveQueen = (fromMove, con) => {\n    // can behave as any other piece apart from knight.\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    let i = fromToZero;\n    if (fromToZero === i || fromToZero === -i || fromToZero === 0) {\n      if (fromToOne === i || fromToOne === -i || fromToOne === 0) {\n        return movePiece(fromSquare, con);\n      }\n    }\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOne <= 7 || fromToOne >= -7) {\n        return movePiece(fromSquare, con);\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const moveKing = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero === 1 || fromToZero === 0 || fromToZero === -1) {\n      if (fromToOne === 1 || fromToOne === 0 || fromToOne === -1) {\n        return movePiece(fromSquare, con);\n      }\n    }\n    return console.log(\"nah\");\n  };\n\n  const checkPath = (path) => {\n    //get an path array\n    // [\"67\",\"57\"]\n    if (mapObj[path[0]].type === \"bishop\") return;\n    for (let i = 1; i <= path.length; i++) {\n      let figure = path[i];\n      if (mapObj[figure]) return false;\n      if (i === path.length - 1) {\n        if (mapObj[figure]) {\n          if (mapObj[figure].player !== mapObj[figure]) {\n          }\n        }\n      }\n      //if last cell is empty ?\n      // if the last cell is the same color as the current player\n      //if the last cell is the other color\n\n      //last cell.\n    }\n    return true;\n    // return boolean\n  };\n\n  const movePiece = (fromSquare, toSquare) => {\n    // here we will move the actual piece from one sqaure to another.\n    console.log(\"inside move\", fromSquare, toSquare);\n    // 1. mapObj[toSquare] = mapObj[fromSquare] to the obj\n    // 2. delete the property whose key is \"fromSquare\" from mapObj\n    const path = getTheFigurePath(fromSquare, toSquare);\n    if (!checkPath(path)) return;\n\n    mapObj[toSquare] = mapObj[fromSquare];\n    delete mapObj[fromSquare];\n  };\n  // useEffect(() => {\n  //   console.log(\"inEffect\", fromSquare, toSquare);\n  //   if (fromSquare && toSquare) {\n  //     movePiece(fromSquare, toSquare);\n  //     // setToSquare();\n  //   }\n  // }, [fromSquare, toSquare]);\n\n  // console.log(\"fromSquare:\", fromSquare);\n  // console.log(\"ToSquare:\", toSquare);\n  // const borderHover = \"black solid 1px\";\n  // console.log(borderHover);\n  // let isHovered = false;\n\n  // const handleMouseOver = (colorPic, borderHover) => {\n  //   if (count === 0) {\n  //     // borderHover = \"red solid 1px\";\n  //     // console.log(borderHover);\n  //     // console.log(\"color:\", colorPic);\n  //     isHovered = true;\n  //     // colorPic = \"black\";\n  //     // console.log(\"color2:\", colorPic);P\n\n  //     console.log(isHovered);\n  //   }\n  // };\n\n  const handleClick = (con) => {\n    if (count === 0) {\n      if (!mapObj[con]) {\n        return;\n      }\n    }\n    if (count === 0) {\n      setFromSquare(con);\n      setCount(count + 1);\n      return;\n    }\n    //second click\n    // fromSquare -> toSqaure\n    if (!mapObj[con] || mapObj[fromSquare].player !== mapObj[con].player) {\n      getTheFigurePath(fromSquare, con);\n\n      if (mapObj[fromSquare].type === \"pawn\") {\n        movePawn(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"rook\") {\n        moveRook(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"knight\") {\n        moveKnight(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"bishop\") {\n        moveBishop(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"king\") {\n        moveKing(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"queen\") {\n        moveQueen(fromSquare, con);\n        setCount(0);\n        return;\n      }\n    }\n    setCount(0);\n  };\n\n  return (\n    // we will map 8 * 8 of arrays to build our board.\n    <div>\n      {Array(8)\n        .fill(0)\n        .map((e, rowIndex) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n              }}\n            >\n              {Array(8)\n                .fill(0)\n                .map((e, squareIndex) => {\n                  const colorPic =\n                    (squareIndex + rowIndex) % 2 === 0 ? \"white\" : \"black\";\n                  // we will caculate the spread of black & white color on the board and identify each square\n                  const numRow = rowIndex.toString();\n                  const numSquare = squareIndex.toString();\n                  const con = numRow.concat(numSquare);\n                  const piece = mapObj[con];\n\n                  return (\n                    //props\n                    <Square\n                      color={colorPic}\n                      piece={piece}\n                      onClick={() => handleClick(con)}\n                      // onMouseOver={() => handleMouseOver(colorPic)}\n                    />\n                  );\n                })}\n            </div>\n          );\n        })}\n      <h1>clock</h1>\n    </div>\n  );\n\n  /* return (\n    <div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n      </div>\n\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"black\" }} />\n      </div>\n    </div>\n   );*/\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n      {/* <Square color=\"white\" piece={{type:\"rook\", player:\"black\"}} /> */}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}