{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Chess/src/App.js\";\nimport React, { useState, useEffect } from \"react\"; // import logo from \"./logo.svg\";\n\nimport \"./App.css\";\nimport Square from \"./Square\"; // import styled from \"styled-components\";\n// fromSquare \"10\"\n// toSquare \"21\"\n// mapObj\n// 2. mapObj[toSquare] = mapObj[fromSquare] to the obj\n// 1. delete the property whose key is \"fromSquare\" from mapObj\n// const Div = styled.div({\n//   background: \"yellow\",\n//   opacity: \"1\",\n//   \":hover\": {\n//     background: \"red\",\n//   },\n// });\n\nconst getTheFigurePath = (moveFrom, moveTo) => {\n  const path = [];\n  let passingSquare;\n  const [moveFromRow, moveFromCol] = splitAndParseToNumber(moveFrom);\n  const [moveToRow, moveToCol] = splitAndParseToNumber(moveTo);\n  let j = moveFromCol; //fill the path with the squares we past\n  //check which is bigger , the rows move from or rows move to . if moveTo rows? then we going down, else going up\n  //check the going up movements:TODO - SET IN A OTHER FUNCTION ?\n\n  if (moveFromRow > moveToRow) {\n    //going only up the board\n    if (moveFromCol === moveToCol) {\n      for (let i = moveFromRow; i >= moveToRow; i--) {\n        passingSquare = i.toString() + moveFromCol.toString();\n        path.push(passingSquare);\n      }\n    } //going up and move left\n    else if (moveFromCol > moveToCol) {\n        for (let i = moveFromRow; i >= moveToRow; i--) {\n          passingSquare = i.toString() + j.toString();\n          path.push(passingSquare);\n          if (j >= moveToCol) j--;\n        }\n      } //move up and turn right\n      else if (moveFromCol < moveToCol) {\n          for (let i = moveFromRow; i >= moveToRow; i--) {\n            passingSquare = i.toString() + j.toString();\n            path.push(passingSquare);\n            if (j <= moveToCol) j++;\n          }\n        }\n  } // Check for the going down movements:\n  else {\n      //only goes down:\n      if (moveFromCol === moveToCol) {\n        for (let i = moveFromRow; i <= moveToRow; i++) {\n          passingSquare = i.toString() + moveToCol.toString();\n          path.push(passingSquare);\n        } //goes down and right\n\n      } else if (moveFromCol < moveToCol) {\n        for (let i = moveFromRow; i <= moveToRow; i++) {\n          passingSquare = i.toString() + j.toString();\n          path.push(passingSquare);\n          if (j <= moveToCol) j++;\n        } //goes down and left\n\n      } else {\n        for (let i = moveFromRow; i <= moveToRow; i++) {\n          passingSquare = i.toString() + j.toString();\n          if (j >= moveToCol) j--;\n        }\n      }\n    }\n\n  return path;\n};\n\nconst mapObj = {\n  \"00\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"01\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"01\": {\n    type: \"knight\",\n    player: \"black\"\n  },\n  \"02\": {\n    type: \"bishop\",\n    player: \"black\"\n  },\n  \"03\": {\n    type: \"king\",\n    player: \"black\"\n  },\n  \"04\": {\n    type: \"queen\",\n    player: \"black\"\n  },\n  \"05\": {\n    type: \"bishop\",\n    player: \"black\"\n  },\n  \"06\": {\n    type: \"knight\",\n    player: \"black\"\n  },\n  \"07\": {\n    type: \"rook\",\n    player: \"black\"\n  },\n  \"10\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"11\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"12\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"13\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"14\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"15\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"16\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"17\": {\n    type: \"pawn\",\n    player: \"black\"\n  },\n  \"60\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"61\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"62\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"63\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"64\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"65\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"66\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"67\": {\n    type: \"pawn\",\n    player: \"white\"\n  },\n  \"70\": {\n    type: \"rook\",\n    player: \"white\"\n  },\n  \"71\": {\n    type: \"knight\",\n    player: \"white\"\n  },\n  \"72\": {\n    type: \"bishop\",\n    player: \"white\"\n  },\n  \"73\": {\n    type: \"queen\",\n    player: \"white\"\n  },\n  \"74\": {\n    type: \"king\",\n    player: \"white\"\n  },\n  \"75\": {\n    type: \"bishop\",\n    player: \"white\"\n  },\n  \"76\": {\n    type: \"knight\",\n    player: \"white\"\n  },\n  \"77\": {\n    type: \"rook\",\n    player: \"white\"\n  }\n}; // movePiece(\"10\", \"30\");\n\nconst Board = () => {\n  const [count, setCount] = useState(0);\n  const [fromSquare, setFromSquare] = useState(); // const [toSquare, setToSquare] = useState();\n\n  const movePawn = (fromMove, con) => {\n    console.log(mapObj[fromSquare].player);\n\n    if (mapObj[fromSquare].player === \"black\") {\n      if (fromMove[0] - con[0] === -1) {\n        if (fromMove[1] - con[1] === 0) {\n          if (!mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        } else if (fromMove[1] - con[1] === 1 || fromMove[1] - con[1] === -1) {\n          if (!mapObj[con]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        }\n      }\n    }\n\n    if (mapObj[fromSquare].player === \"white\") {\n      if (fromMove[0] - con[0] === 1) {\n        if (fromMove[1] - con[1] === 0) {\n          if (!mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        } else if (fromMove[1] - con[1] === 1 || fromMove[1] - con[1] === -1) {\n          if (!mapObj[con]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        }\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const moveRook = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero <= 7 || fromToZero >= -7) {\n      if (fromToOne === 0) {\n        return movePiece(fromSquare, con);\n      }\n    }\n\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOne <= 7 || fromToOne >= -7) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n\n  const moveKnight = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero === 1 || fromToZero === -1) {\n      if (fromToOne === -2 || fromToOne === 2) {\n        return movePiece(fromSquare, con);\n      }\n    } else if (fromToZero === 2 || fromToZero === -2) {\n      if (fromToOne === 1 || fromToOne === -1) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n\n  const moveBishop = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    let i = fromToZero;\n\n    if (fromToZero === i || fromToZero === -i) {\n      if (fromToOne === i || fromToOne === -i) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n\n  const moveQueen = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    let i = fromToZero;\n\n    if (fromToZero === i || fromToZero === -i || fromToZero === 0) {\n      if (fromToOne === i || fromToOne === -i || fromToOne === 0) {\n        return movePiece(fromSquare, con);\n      }\n    }\n\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOne <= 7 || fromToOne >= -7) {\n        return movePiece(fromSquare, con);\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const moveKing = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero === 1 || fromToZero === 0 || fromToZero === -1) {\n      if (fromToOne === 1 || fromToOne === 0 || fromToOne === -1) {\n        return movePiece(fromSquare, con);\n      }\n    }\n\n    return console.log(\"nah\");\n  };\n\n  const movePiece = (fromSquare, toSquare) => {\n    console.log(\"inside move\", fromSquare, toSquare); // 1. mapObj[toSquare] = mapObj[fromSquare] to the obj\n    // 2. delete the property whose key is \"fromSquare\" from mapObj\n\n    mapObj[toSquare] = mapObj[fromSquare];\n    delete mapObj[fromSquare];\n  }; // useEffect(() => {\n  //   console.log(\"inEffect\", fromSquare, toSquare);\n  //   if (fromSquare && toSquare) {\n  //     movePiece(fromSquare, toSquare);\n  //     // setToSquare();\n  //   }\n  // }, [fromSquare, toSquare]);\n  // console.log(\"fromSquare:\", fromSquare);\n  // console.log(\"ToSquare:\", toSquare);\n  // const borderHover = \"black solid 1px\";\n  // console.log(borderHover);\n  // let isHovered = false;\n  // const handleMouseOver = (colorPic, borderHover) => {\n  //   if (count === 0) {\n  //     // borderHover = \"red solid 1px\";\n  //     // console.log(borderHover);\n  //     // console.log(\"color:\", colorPic);\n  //     isHovered = true;\n  //     // colorPic = \"black\";\n  //     // console.log(\"color2:\", colorPic);P\n  //     console.log(isHovered);\n  //   }\n  // };\n\n\n  const handleClick = con => {\n    if (count === 0) {\n      if (!mapObj[con]) {\n        return;\n      }\n    }\n\n    if (count === 0) {\n      setFromSquare(con);\n      setCount(count + 1);\n      return;\n    } //second click\n    // fromSquare -> toSqaure\n\n\n    if (!mapObj[con] || mapObj[fromSquare].player !== mapObj[con].player) {\n      if (mapObj[fromSquare].type === \"pawn\") {\n        movePawn(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"rook\") {\n        moveRook(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"knight\") {\n        moveKnight(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"bishop\") {\n        moveBishop(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"king\") {\n        moveKing(fromSquare, con);\n        setCount(0);\n        return;\n      }\n\n      if (mapObj[fromSquare].type === \"queen\") {\n        moveQueen(fromSquare, con);\n        setCount(0);\n        return;\n      }\n    }\n\n    setCount(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 5\n    }\n  }, Array(8).fill(0).map((e, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }\n    }, Array(8).fill(0).map((e, squareIndex) => {\n      const colorPic = (squareIndex + rowIndex) % 2 === 0 ? \"white\" : \"black\";\n      const numRow = rowIndex.toString();\n      const numSquare = squareIndex.toString();\n      const con = numRow.concat(numSquare);\n      const piece = mapObj[con];\n      return /*#__PURE__*/React.createElement(Square, {\n        color: colorPic,\n        piece: piece,\n        onClick: () => handleClick(con) // onMouseOver={() => handleMouseOver(colorPic)}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }\n      });\n    }));\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }\n  }, \"clock\"));\n  /* return (\n    <div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n      </div>\n       <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"black\" }} />\n      </div>\n    </div>\n   );*/\n};\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/Chess/src/App.js"],"names":["React","useState","useEffect","Square","getTheFigurePath","moveFrom","moveTo","path","passingSquare","moveFromRow","moveFromCol","splitAndParseToNumber","moveToRow","moveToCol","j","i","toString","push","mapObj","type","player","Board","count","setCount","fromSquare","setFromSquare","movePawn","fromMove","con","console","log","movePiece","moveRook","fromToZero","fromToOne","moveKnight","moveBishop","moveQueen","moveKing","toSquare","handleClick","Array","fill","map","e","rowIndex","display","flexDirection","squareIndex","colorPic","numRow","numSquare","concat","piece","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Square from \"./Square\";\n// import styled from \"styled-components\";\n\n// fromSquare \"10\"\n// toSquare \"21\"\n// mapObj\n// 2. mapObj[toSquare] = mapObj[fromSquare] to the obj\n// 1. delete the property whose key is \"fromSquare\" from mapObj\n\n// const Div = styled.div({\n//   background: \"yellow\",\n//   opacity: \"1\",\n//   \":hover\": {\n//     background: \"red\",\n\n//   },\n// });\n\nconst getTheFigurePath = (moveFrom, moveTo) => {\n  const path = [];\n  let passingSquare;\n  const [moveFromRow, moveFromCol] = splitAndParseToNumber(moveFrom);\n  const [moveToRow, moveToCol] = splitAndParseToNumber(moveTo);\n  let j = moveFromCol;\n  //fill the path with the squares we past\n  //check which is bigger , the rows move from or rows move to . if moveTo rows? then we going down, else going up\n  //check the going up movements:TODO - SET IN A OTHER FUNCTION ?\n  if (moveFromRow > moveToRow) {\n    //going only up the board\n    if (moveFromCol === moveToCol) {\n      for (let i = moveFromRow; i >= moveToRow; i--) {\n        passingSquare = i.toString() + moveFromCol.toString();\n        path.push(passingSquare);\n      }\n    }\n    //going up and move left\n    else if (moveFromCol > moveToCol) {\n      for (let i = moveFromRow; i >= moveToRow; i--) {\n        passingSquare = i.toString() + j.toString();\n        path.push(passingSquare);\n        if (j >= moveToCol) j--;\n      }\n    }\n    //move up and turn right\n    else if (moveFromCol < moveToCol) {\n      for (let i = moveFromRow; i >= moveToRow; i--) {\n        passingSquare = i.toString() + j.toString();\n        path.push(passingSquare);\n        if (j <= moveToCol) j++;\n      }\n    }\n  }\n  // Check for the going down movements:\n  else {\n    //only goes down:\n    if (moveFromCol === moveToCol) {\n      for (let i = moveFromRow; i <= moveToRow; i++) {\n        passingSquare = i.toString() + moveToCol.toString();\n        path.push(passingSquare);\n      }\n      //goes down and right\n    } else if (moveFromCol < moveToCol) {\n      for (let i = moveFromRow; i <= moveToRow; i++) {\n        passingSquare = i.toString() + j.toString();\n        path.push(passingSquare);\n        if (j <= moveToCol) j++;\n      }\n      //goes down and left\n    } else {\n      for (let i = moveFromRow; i <= moveToRow; i++) {\n        passingSquare = i.toString() + j.toString();\n        if (j >= moveToCol) j--;\n      }\n    }\n  }\n  return path;\n};\n\nconst mapObj = {\n  \"00\": { type: \"rook\", player: \"black\" },\n  \"01\": { type: \"rook\", player: \"black\" },\n  \"01\": { type: \"knight\", player: \"black\" },\n  \"02\": { type: \"bishop\", player: \"black\" },\n  \"03\": { type: \"king\", player: \"black\" },\n  \"04\": { type: \"queen\", player: \"black\" },\n  \"05\": { type: \"bishop\", player: \"black\" },\n  \"06\": { type: \"knight\", player: \"black\" },\n  \"07\": { type: \"rook\", player: \"black\" },\n  \"10\": { type: \"pawn\", player: \"black\" },\n  \"11\": { type: \"pawn\", player: \"black\" },\n  \"12\": { type: \"pawn\", player: \"black\" },\n  \"13\": { type: \"pawn\", player: \"black\" },\n  \"14\": { type: \"pawn\", player: \"black\" },\n  \"15\": { type: \"pawn\", player: \"black\" },\n  \"16\": { type: \"pawn\", player: \"black\" },\n  \"17\": { type: \"pawn\", player: \"black\" },\n  \"60\": { type: \"pawn\", player: \"white\" },\n  \"61\": { type: \"pawn\", player: \"white\" },\n  \"62\": { type: \"pawn\", player: \"white\" },\n  \"63\": { type: \"pawn\", player: \"white\" },\n  \"64\": { type: \"pawn\", player: \"white\" },\n  \"65\": { type: \"pawn\", player: \"white\" },\n  \"66\": { type: \"pawn\", player: \"white\" },\n  \"67\": { type: \"pawn\", player: \"white\" },\n  \"70\": { type: \"rook\", player: \"white\" },\n  \"71\": { type: \"knight\", player: \"white\" },\n  \"72\": { type: \"bishop\", player: \"white\" },\n  \"73\": { type: \"queen\", player: \"white\" },\n  \"74\": { type: \"king\", player: \"white\" },\n  \"75\": { type: \"bishop\", player: \"white\" },\n  \"76\": { type: \"knight\", player: \"white\" },\n  \"77\": { type: \"rook\", player: \"white\" },\n};\n\n// movePiece(\"10\", \"30\");\n\nconst Board = () => {\n  const [count, setCount] = useState(0);\n  const [fromSquare, setFromSquare] = useState();\n  // const [toSquare, setToSquare] = useState();\n\n  const movePawn = (fromMove, con) => {\n    console.log(mapObj[fromSquare].player);\n    if (mapObj[fromSquare].player === \"black\") {\n      if (fromMove[0] - con[0] === -1) {\n        if (fromMove[1] - con[1] === 0) {\n          if (!mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        } else if (fromMove[1] - con[1] === 1 || fromMove[1] - con[1] === -1) {\n          if (!mapObj[con]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        }\n      }\n    }\n    if (mapObj[fromSquare].player === \"white\") {\n      if (fromMove[0] - con[0] === 1) {\n        if (fromMove[1] - con[1] === 0) {\n          if (!mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        } else if (fromMove[1] - con[1] === 1 || fromMove[1] - con[1] === -1) {\n          if (!mapObj[con]) {\n            return;\n          } else if (mapObj[fromSquare] !== mapObj[con]) {\n            return movePiece(fromSquare, con);\n          }\n        }\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const moveRook = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero <= 7 || fromToZero >= -7) {\n      if (fromToOne === 0) {\n        return movePiece(fromSquare, con);\n      }\n    }\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOne <= 7 || fromToOne >= -7) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n  const moveKnight = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    if (fromToZero === 1 || fromToZero === -1) {\n      if (fromToOne === -2 || fromToOne === 2) {\n        return movePiece(fromSquare, con);\n      }\n    } else if (fromToZero === 2 || fromToZero === -2) {\n      if (fromToOne === 1 || fromToOne === -1) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n  const moveBishop = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    let i = fromToZero;\n    if (fromToZero === i || fromToZero === -i) {\n      if (fromToOne === i || fromToOne === -i) {\n        return movePiece(fromSquare, con);\n      }\n    }\n  };\n  const moveQueen = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n    let i = fromToZero;\n    if (fromToZero === i || fromToZero === -i || fromToZero === 0) {\n      if (fromToOne === i || fromToOne === -i || fromToOne === 0) {\n        return movePiece(fromSquare, con);\n      }\n    }\n    if (fromMove[0] - con[0] === 0) {\n      if (fromToOne <= 7 || fromToOne >= -7) {\n        return movePiece(fromSquare, con);\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const moveKing = (fromMove, con) => {\n    const fromToZero = fromMove[0] - con[0];\n    const fromToOne = fromMove[1] - con[1];\n\n    if (fromToZero === 1 || fromToZero === 0 || fromToZero === -1) {\n      if (fromToOne === 1 || fromToOne === 0 || fromToOne === -1) {\n        return movePiece(fromSquare, con);\n      }\n    }\n    return console.log(\"nah\");\n  };\n  const movePiece = (fromSquare, toSquare) => {\n    console.log(\"inside move\", fromSquare, toSquare);\n    // 1. mapObj[toSquare] = mapObj[fromSquare] to the obj\n    // 2. delete the property whose key is \"fromSquare\" from mapObj\n    mapObj[toSquare] = mapObj[fromSquare];\n    delete mapObj[fromSquare];\n  };\n  // useEffect(() => {\n  //   console.log(\"inEffect\", fromSquare, toSquare);\n  //   if (fromSquare && toSquare) {\n  //     movePiece(fromSquare, toSquare);\n  //     // setToSquare();\n  //   }\n  // }, [fromSquare, toSquare]);\n\n  // console.log(\"fromSquare:\", fromSquare);\n  // console.log(\"ToSquare:\", toSquare);\n  // const borderHover = \"black solid 1px\";\n  // console.log(borderHover);\n  // let isHovered = false;\n\n  // const handleMouseOver = (colorPic, borderHover) => {\n  //   if (count === 0) {\n  //     // borderHover = \"red solid 1px\";\n  //     // console.log(borderHover);\n  //     // console.log(\"color:\", colorPic);\n  //     isHovered = true;\n  //     // colorPic = \"black\";\n  //     // console.log(\"color2:\", colorPic);P\n\n  //     console.log(isHovered);\n  //   }\n  // };\n\n  const handleClick = (con) => {\n    if (count === 0) {\n      if (!mapObj[con]) {\n        return;\n      }\n    }\n    if (count === 0) {\n      setFromSquare(con);\n      setCount(count + 1);\n      return;\n    }\n    //second click\n    // fromSquare -> toSqaure\n    if (!mapObj[con] || mapObj[fromSquare].player !== mapObj[con].player) {\n      if (mapObj[fromSquare].type === \"pawn\") {\n        movePawn(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"rook\") {\n        moveRook(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"knight\") {\n        moveKnight(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"bishop\") {\n        moveBishop(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"king\") {\n        moveKing(fromSquare, con);\n        setCount(0);\n        return;\n      }\n      if (mapObj[fromSquare].type === \"queen\") {\n        moveQueen(fromSquare, con);\n        setCount(0);\n        return;\n      }\n    }\n    setCount(0);\n  };\n\n  return (\n    <div>\n      {Array(8)\n        .fill(0)\n        .map((e, rowIndex) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n              }}\n            >\n              {Array(8)\n                .fill(0)\n                .map((e, squareIndex) => {\n                  const colorPic =\n                    (squareIndex + rowIndex) % 2 === 0 ? \"white\" : \"black\";\n\n                  const numRow = rowIndex.toString();\n                  const numSquare = squareIndex.toString();\n                  const con = numRow.concat(numSquare);\n                  const piece = mapObj[con];\n\n                  return (\n                    <Square\n                      color={colorPic}\n                      piece={piece}\n                      onClick={() => handleClick(con)}\n                      // onMouseOver={() => handleMouseOver(colorPic)}\n                    />\n                  );\n                })}\n            </div>\n          );\n        })}\n      <h1>clock</h1>\n    </div>\n  );\n\n  /* return (\n    <div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"white\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"white\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: null, player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: null, player: \"black\" }} />\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"pawn\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"pawn\", player: \"black\" }} />\n      </div>\n\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <Square color=\"black\" piece={{ type: \"rook\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"queen\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"king\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"bishop\", player: \"black\" }} />\n        <Square color=\"black\" piece={{ type: \"knight\", player: \"black\" }} />\n        <Square color=\"white\" piece={{ type: \"rook\", player: \"black\" }} />\n      </div>\n    </div>\n   );*/\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n      {/* <Square color=\"white\" piece={{type:\"rook\", player:\"black\"}} /> */}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}